#program base.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Definition %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Iff [for all occurs(Action, Timestep), permitted(Action, Timestep) is true],
%   then we are strongly compliant
%
% Inverse: Iff [there exists occurs(Action, Timestep), permitted(Action, Timestep) is not true],
%   then we are not strongly compliant
-auth_compliance(strong) :-
    occurs(Action, Timestep),
    agent_action(Action),  % Note: Our addition
    not permitted(Action, Timestep).

% Iff [for all occurs(Action, Timestep), permitted(Action, Timestep) is not false],
%   then we are weakly compliant
%
% Inverse: Iff [there exists occurs(Action, Timestep), permitted(Action, Timestep) is false],
%   then we are not weakly compliant
-auth_compliance(weak) :-
    occurs(Action, Timestep),
    agent_action(Action),  % Note: Our addition
    -permitted(Action, Timestep).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Closed-world assumption %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

auth_compliance(strong) :-
    not -auth_compliance(strong).

auth_compliance(weak) :-
    not -auth_compliance(weak).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Sanity Checks %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% An authorizaiton policy can only describe agent actions (and wait)

:-
    permitted(Action, Timestep),
    action(Action),
    Action != wait,
    not agent_action(Action).

:-
    -permitted(Action, Timestep),
    action(Action),
    Action != wait,
    not agent_action(Action).
