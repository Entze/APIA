% Use BibTex instead of BibLaTeX

@misc{gebser_potassco_2019,
	title = {Potassco {Guide}},
	abstract = {This document provides an introduction to the Answer Set Programming (ASP) tools gringo, clasp, and clingo, developed at the University of Potsdam. The basic idea of ASP is to express a problem in the form of a logic program so that its logical models, called answer sets, provide the solutions to the original problem. The first tool, gringo, is a so-called grounder translating user-provided logic programs (with variables) into equivalent propositional logic programs (without variables). The second tool, clasp, is a so-called solver computing the answer sets of the propositional programs issued by gringo. The third tool, clingo, combines the functionalities of gringo and clasp, and additionally integrates the scripting languages Lua and Python either through libraries or embedded code. This guide, for one, aims at enabling ASP novices to make use of the aforementioned tools. For another, it provides a reference of the tools’ features that ASP adepts might be tempted to exploit.},
	author = {Gebser, Martin and Kaminski, Roland and Kaufmann, Benjamin and Lindauer, Marius and Ostrowski, Max and Romero, Javier and Schaub, Torsten and Thiele, Sven and Wanko, Philipp},
	month = jan,
	year = {2019},
	keywords = {clingo 5, Status - Overview Contribution, Status - Thorough Investigation, Status - Executive Summary},
	file = {guide.pdf:D\:\\Documents\\Zotero\\storage\\EZH3TESF\\guide.pdf:application/pdf}
}

@inproceedings{balduccini_aaa_2008,
	title = {The {AAA} {Architecture}: {An} {Overview}.},
	booktitle = {{AAAI} {Spring} {Symposium}: {Emotion}, {Personality}, and {Social} {Behavior}},
	author = {Balduccini, Marcello and Gelfond, Michael},
	year = {2008},
	keywords = {Status - Overview Contribution, Status - Thorough Investigation, Status - Executive Summary, Agent architecture, AAA architecture, Important},
	pages = {1--6},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\KV4HESMX\\Balduccini and Gelfond - 2008 - The AAA Architecture An Overview..pdf:application/pdf}
}

@phdthesis{blount_architecture_2013,
	title = {An architecture for intentional agents},
	copyright = {Unrestricted.},
	url = {https://ttu-ir.tdl.org/handle/2346/58449},
	abstract = {The goal of this research is to investigate the use of
Answer Set Prolog (ASP) based languages  and
action languages in the design and implementation of intelligent agents.
In particular we are interested in better understanding
an agent's intentions and how they are related to the
agent's beliefs, goals, and actions.
There has been substantial work on intentions
as part of a solution to a problem that is at the center of
intelligent behavior:  the problem of selecting the action to perform next.
We believe that an agent architecture that includes intentions
will allow us to improve the current methodology of ASP-based
agent design.
In this dissertation we will define an architecture
for the design and implementation of agents
whose behavior is determined by their intentions.

We divide this task into two parts.
The first is describing a model of an intentional
agent and its environment.
The second is to incorporate such a model into an architecture,
to formally describe reasoning tasks and behavior of intentional agents,
 and to create a prototype implementation.

The domain model is a transition diagram
whose nodes represent the mental state of the agent
and the physical state of the environment.
The former is described by a theory of intentions TI which is
independent from the description of the environment.
Both are described using action language AL
The agent's reasoning tasks include
explaining unexpected observations (diagnosis) and determining which
of his actions are intended at the present moment.
Intuitively, an intentional agent only attempts to
perform those actions that are intended and does so without delay.
We present a prototype implementation of the architecture based on
a refinement of the architecture in which
the reasoning tasks of the agent are reduced to computing answer sets of
programs constructed from the agent's knowledge.},
	author = {Blount, Justin},
	month = dec,
	year = {2013},
	keywords = {CR-Prolog, Status - Executive Summary, Agent architecture, AIA architecture, Important, Status - Referenced},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\XS46I4YZ\\Blount - 2013 - An architecture for intentional agents.pdf:application/pdf;Snapshot:D\:\\Documents\\Zotero\\storage\\VVNHC6YR\\58449.html:text/html}
}

@article{inclezan_asp_2018,
	title = {An {ASP} {Methodology} for {Understanding} {Narratives} about {Stereotypical} {Activities}},
	volume = {18},
	issn = {1471-0684, 1475-3081},
	url = {https://www.cambridge.org/core/journals/theory-and-practice-of-logic-programming/article/an-asp-methodology-for-understanding-narratives-about-stereotypical-activities/8FC2C21C078E960BC4D40CC13AF6C51E},
	doi = {10.1017/S1471068418000121},
	abstract = {We describe an application of Answer Set Programming to the understanding of narratives about stereotypical activities, demonstrated via question answering. Substantial work in this direction was done by Erik Mueller, who modeled stereotypical activities as scripts. His systems were able to understand a good number of narratives, but could not process texts describing exceptional scenarios. We propose addressing this problem by using a theory of intentions developed by Blount, Gelfond, and Balduccini. We present a methodology in which we substitute scripts by activities (i.e., hierarchical plans associated with goals) and employ the concept of an intentional agent to reason about both normal and exceptional scenarios. We exemplify the application of this methodology by answering questions about a number of restaurant stories. This paper is under consideration for acceptance in TPLP.},
	language = {en},
	number = {3-4},
	urldate = {2020-03-24},
	journal = {Theory and Practice of Logic Programming},
	author = {Inclezan, Daniela and Zhang, Qinglin and Balduccini, Marcello and Israney, Ankush},
	month = jul,
	year = {2018},
	note = {Publisher: Cambridge University Press},
	keywords = {intentions, natural language understanding, stereotypical activities, Status - Overview Contribution, Status - Executive Summary},
	pages = {535--552},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\8VZSRE9T\\Inclezan et al. - 2018 - An ASP Methodology for Understanding Narratives ab.pdf:application/pdf;Snapshot:D\:\\Documents\\Zotero\\storage\\BMNERZMB\\8FC2C21C078E960BC4D40CC13AF6C51E.html:text/html}
}

@article{zhang_application_2018,
	title = {An {Application} of {ASP} {Theories} of {Intentions} to {Understanding} {Restaurant} {Scenarios}: {Insights} and {Narrative} {Corpus}},
	shorttitle = {An {Application} of {ASP} {Theories} of {Intentions} to {Understanding} {Restaurant} {Scenarios}},
	url = {http://arxiv.org/abs/1810.00445},
	abstract = {This paper presents a practical application of Answer Set Programming to the understanding of narratives about restaurants. While this task was investigated in depth by Erik Mueller, exceptional scenarios remained a serious challenge for his script-based story comprehension system. We present a methodology that remedies this issue by modeling characters in a restaurant episode as intentional agents. We focus especially on the refinement of certain components of this methodology in order to increase coverage and performance. We present a restaurant story corpus that we created to design and evaluate our methodology. Under consideration in Theory and Practice of Logic Programming (TPLP).},
	urldate = {2020-03-24},
	journal = {arXiv:1810.00445 [cs]},
	author = {Zhang, Qinglin and Benton, Chris and Inclezan, Daniela},
	month = sep,
	year = {2018},
	note = {arXiv: 1810.00445},
	keywords = {Computer Science - Artificial Intelligence, Status - Overview Contribution, Status - Executive Summary, ASP},
	file = {arXiv Fulltext PDF:D\:\\Documents\\Zotero\\storage\\8HW9PF4G\\Zhang et al. - 2018 - An Application of ASP Theories of Intentions to Un.pdf:application/pdf;arXiv.org Snapshot:D\:\\Documents\\Zotero\\storage\\TKKPCNJ8\\1810.html:text/html}
}

@inproceedings{georgeff_belief-desire-intention_1999,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {The {Belief}-{Desire}-{Intention} {Model} of {Agency}},
	isbn = {978-3-540-49057-9},
	doi = {10.1007/3-540-49057-4_1},
	abstract = {Within the ATAL community, the belief-desire-intention (BDI) model has come to be possibly the best known and best studied model of practical reasoning agents. There are several reasons for its success, but perhaps the most compelling are that the BDI model combines a respectable philosophical model of human practical reasoning, (originally developed by Michael Bratman [1]), a number of implementations (in the IRMA architecture [2] and the various PRS-like systems currently available [7]), several successful applications (including the now-famous fault diagnosis system for the space shuttle, as well as factory process control systems and business process management [8]), and finally, an elegant abstract logical semantics, which have been taken up and elaborated upon widely within the agent research community [14, 16].},
	language = {en},
	booktitle = {Intelligent {Agents} {V}: {Agents} {Theories}, {Architectures}, and {Languages}},
	publisher = {Springer},
	author = {Georgeff, Michael and Pell, Barney and Pollack, Martha and Tambe, Milind and Wooldridge, Michael},
	editor = {Müller, Jörg P. and Rao, Anand S. and Singh, Munindar P.},
	year = {1999},
	keywords = {Business Process Management, Classical Decision Theory, Intelligent Agent, Thirteenth International Joint, Truth Maintenance System, Status - Overview Contribution, Status - Executive Summary, BDI architecture, Soar model},
	pages = {1--10},
	file = {Springer Full Text PDF:D\:\\Documents\\Zotero\\storage\\I4K7ISMH\\Georgeff et al. - 1999 - The Belief-Desire-Intention Model of Agency.pdf:application/pdf}
}

@inproceedings{rao_agentspeakl_1996,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {{AgentSpeak}({L}): {BDI} agents speak out in a logical computable language},
	isbn = {978-3-540-49621-2},
	shorttitle = {{AgentSpeak}({L})},
	doi = {10.1007/BFb0031845},
	abstract = {Belief-Desire-Intention (BDI) agents have been investigated by many researchers from both a theoretical specification perspective and a practical design perspective. However, there still remains a large gap between theory and practice. The main reason for this has been the complexity of theorem-proving or model-checking in these expressive specification logics. Hence, the implemented BDI systems have tended to use the three major attitudes as data structures, rather than as modal operators. In this paper, we provide an alternative formalization of BDI agents by providing an operational and proof-theoretic semantics of a language AgentSpeak(L). This language can be viewed as an abstraction of one of the implemented BDI systems (i.e., PRS) and allows agent programs to be written and interpreted in a manner similar to that of horn-clause logic programs. We show how to perform derivations in this logic using a simple example. These derivations can then be used to prove the properties satisfied by BDI agents.},
	language = {en},
	booktitle = {Agents {Breaking} {Away}},
	publisher = {Springer},
	author = {Rao, Anand S.},
	editor = {Van de Velde, Walter and Perram, John W.},
	year = {1996},
	keywords = {Status - Executive Summary, Achievement Goal, Base Belief, Label Transition System, Logic Program, Operational Semantic, BDI architecture, AgentSpeak(L)},
	pages = {42--55},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\7GF7E5EY\\Rao - 1996 - AgentSpeak(L) BDI agents speak out in a logical c.pdf:application/pdf}
}

@incollection{baral_reasoning_2000,
	address = {Boston, MA},
	series = {The {Springer} {International} {Series} in {Engineering} and {Computer} {Science}},
	title = {Reasoning {Agents} in {Dynamic} {Domains}},
	isbn = {978-1-4615-1567-8},
	url = {https://doi.org/10.1007/978-1-4615-1567-8_12},
	abstract = {The paper discusses an architecture for intelligent agents based on the use of A-Prolog — a language of logic programs under the answer set semantics. A-Prolog is used to represent the agent’s knowledge about the domain and to formulate the agent’s reasoning tasks. We outline how these tasks can be reduced to answering questions about properties of simple logic programs and demonstrate the methodology of constructing these programs.},
	language = {en},
	urldate = {2020-04-07},
	booktitle = {Logic-{Based} {Artificial} {Intelligence}},
	publisher = {Springer US},
	author = {Baral, Chitta and Gelfond, Michael},
	editor = {Minker, Jack},
	year = {2000},
	doi = {10.1007/978-1-4615-1567-8_12},
	keywords = {Status - Executive Summary, Intelligent agents, logic programming and nonmonotonic reasoning, A-Prolog, AAA architecture},
	pages = {257--279},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\RT6XWM8Z\\Baral and Gelfond - 2000 - Reasoning Agents in Dynamic Domains.pdf:application/pdf}
}

@article{gelfond_action_1998,
	title = {Action languages},
	issn = {1401-9841},
	author = {Gelfond, Michael and Lifschitz, Vladimir},
	year = {1998},
	note = {Publisher: Citeseer},
	keywords = {Status - Overview Contribution, Status - Thorough Investigation, Status - Executive Summary, Important, Action language},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\WIDW93PN\\Gelfond and Lifschitz - 1998 - Action languages.pdf:application/pdf}
}

@article{turner_representing_1997,
	title = {Representing actions in logic programs and default theories: {A} situation calculus approach},
	volume = {31},
	issn = {0743-1066},
	number = {1},
	journal = {Journal of Logic Programming},
	author = {Turner, Hudson},
	year = {1997},
	note = {Publisher: New York: Elsevier Science Pub. Co., c1984-c2000.},
	keywords = {Status - Executive Summary, Action language (AC)},
	pages = {245--298},
	file = {Turner - 1997 - Representing actions in logic programs and default.pdf:D\:\\Documents\\Zotero\\storage\\EEQFJ2C5\\Turner - 1997 - Representing actions in logic programs and default.pdf:application/pdf}
}

@inproceedings{gelfond_yet_2009,
	title = {Yet another modular action language},
	author = {Gelfond, Michael and Inclezan, Daniela},
	year = {2009},
	keywords = {Status - Executive Summary, Action language (ALM), Status - Referenced},
	pages = {64--78},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\9V87VKJC\\Gelfond and Inclezan - 2009 - Yet another modular action language.pdf:application/pdf}
}

@incollection{reiter_closed_1981,
	title = {On closed world data bases},
	isbn = {978-0-934613-03-3},
	url = {http://www.sciencedirect.com/science/article/pii/B9780934613033500143},
	abstract = {Deductive question-answering systems generally evaluate queries under one of two possible assumptions which we in this paper refer to as the open and closed world assumptions. The open world assumption corresponds to the usual first order approach to query evaluation: Given a data base DB and a query Q, the only answers to Q are those which obtain from proofs of Q given DB as hypotheses. Under the closed world assumption, certain answers are admitted as a result of failure to find a proof. More specifically, if no proof of a positive ground literal exists, then the negation of that literal is assumed true. In this paper, we show that closed world evaluation of an arbitrary query may be reduced to open world evaluation of so-called atomic queries. We then show that the closed world assumption can lead to inconsistencies, but for Horn data bases no such inconsistencies can arise. Finally, we show how for Horn data bases under the closed world assumption purely negative clauses are irrelevant for deductive retrieval and function instead as integrity constraints.},
	language = {en},
	urldate = {2020-04-07},
	booktitle = {Readings in {Artificial} {Intelligence}},
	publisher = {Morgan Kaufmann},
	author = {Reiter, Raymond},
	editor = {Webber, Bonnie Lynn and Nilsson, Nils J.},
	month = jan,
	year = {1981},
	doi = {10.1016/B978-0-934613-03-3.50014-3},
	keywords = {Status - Executive Summary, Status - Referenced},
	pages = {119--140},
	file = {ScienceDirect Snapshot:D\:\\Documents\\Zotero\\storage\\T8KSDACV\\B9780934613033500143.html:text/html;Full text PDF:D\:\\Documents\\Zotero\\storage\\ETUGNSW5\\Reiter - 1981 - ON CLOSED WORLD DATA BASES.pdf:application/pdf}
}

@book{gelfond_knowledge_2014,
	title = {Knowledge {Representation}, {Reasoning}, and the {Design} of {Intelligent} {Agents}: {The} {Answer}-{Set} {Programming} {Approach}},
	isbn = {978-1-107-78287-7},
	shorttitle = {Knowledge {Representation}, {Reasoning}, and the {Design} of {Intelligent} {Agents}},
	url = {https://web.archive.org/web/20140326172929/http://redwood.cs.ttu.edu/~mgelfond/FALL-2012/book.pdf},
	abstract = {Knowledge representation and reasoning is the foundation of artificial intelligence, declarative programming, and the design of knowledge-intensive software systems capable of performing intelligent tasks. Using logical and probabilistic formalisms based on answer set programming (ASP) and action languages, this book shows how knowledge-intensive systems can be given knowledge about the world and how it can be used to solve non-trivial computational problems. The authors maintain a balance between mathematical analysis and practical design of intelligent agents. All the concepts, such as answering queries, planning, diagnostics, and probabilistic reasoning, are illustrated by programs of ASP. The text can be used for AI-related undergraduate and graduate classes and by researchers who would like to learn more about ASP and knowledge representation.},
	language = {en},
	publisher = {Cambridge University Press},
	author = {Gelfond, Michael and Kahl, Yulia},
	month = mar,
	year = {2014},
	note = {Google-Books-ID: kBL7AgAAQBAJ},
	keywords = {Status - Executive Summary, Computers / Computer Science, Computers / Intelligence (AI) \& Semantics, Computers / Natural Language Processing, Computers / Programming / General, Computers / Programming Languages / General, Computers / Software Development \& Engineering / General, Psychology / Cognitive Psychology \& Cognition, Status - Referenced},
	file = {Internet Archive PDF:D\:\\Documents\\Zotero\\storage\\376FZ9Q9\\Gelfond and Kahl - 2014 - Knowledge Representation, Reasoning, and the Desig.pdf:application/pdf;Book website:D\:\\Documents\\Zotero\\storage\\TGIUXNA3\\krr_book.html:text/html}
}

@article{balduccini_diagnostic_2003,
	title = {Diagnostic reasoning with {A}-{Prolog}},
	volume = {3},
	issn = {1475-3081, 1471-0684},
	url = {https://www.cambridge.org/core/journals/theory-and-practice-of-logic-programming/article/diagnostic-reasoning-with-aprolog/EF3CF2AA0C9141D54C87FCFA7ADF4A45},
	doi = {10.1017/S1471068403001807},
	abstract = {In this paper, we suggest an architecture for a software agent which
operates a physical device and is capable of making observations and
of testing and repairing the device's components. We present
simplified definitions of the notions of symptom, candidate
diagnosis, and diagnosis which are based on the theory of action
language \$\{{\textbackslash}cal AL\}\$.
The definitions allow one to give a simple account of the agent's
behavior in which many of the agent's tasks are reduced to computing
stable models of logic programs.},
	language = {en},
	number = {4-5},
	urldate = {2020-04-07},
	journal = {Theory and Practice of Logic Programming},
	author = {Balduccini, Marcello and Gelfond, Michael},
	month = jul,
	year = {2003},
	note = {Publisher: Cambridge University Press},
	keywords = {Status - Executive Summary, A-Prolog, Action language (AL)},
	pages = {425--461},
	file = {Snapshot:D\:\\Documents\\Zotero\\storage\\EENP5G5D\\EF3CF2AA0C9141D54C87FCFA7ADF4A45.html:text/html;Submitted Version:D\:\\Documents\\Zotero\\storage\\29FCQL8P\\Balduccini and Gelfond - 2003 - Diagnostic reasoning with A-Prolog.pdf:application/pdf}
}

@article{balduccini_answer_2006,
	title = {Answer set based design of knowledge systems},
	volume = {47},
	issn = {1573-7470},
	url = {https://doi.org/10.1007/s10472-006-9026-1},
	doi = {10.1007/s10472-006-9026-1},
	abstract = {The aim of this paper is to demonstrate that A-Prolog is a powerful language for the construction of reasoning systems. In fact, A-Prolog allows to specify the initial situation, the domain model, the control knowledge, and the reasoning modules. Moreover, it is efficient enough to be used for practical tasks and can be nicely integrated with programming languages such as Java. An extension of  A-Prolog (CR-Prolog) allows to further improve the quality of reasoning by specifying requirements that the solutions should satisfy if at all possible. The features of A-Prolog and CR-Prolog are demonstrated by describing in detail the design of USA-Advisor, an A-Prolog based decision support system for the Space Shuttle flight controllers.},
	language = {en},
	number = {1},
	urldate = {2020-04-07},
	journal = {Annals of Mathematics and Artificial Intelligence},
	author = {Balduccini, Marcello and Gelfond, Michael and Nogueira, Monica},
	month = jun,
	year = {2006},
	keywords = {Status - Executive Summary, A-Prolog},
	pages = {183--219},
	file = {Springer Full Text PDF:D\:\\Documents\\Zotero\\storage\\C65R2ES5\\Balduccini et al. - 2006 - Answer set based design of knowledge systems.pdf:application/pdf}
}

@inproceedings{dignum_intentional_1998,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Intentional agents and goal formation},
	isbn = {978-3-540-69696-4},
	doi = {10.1007/BFb0026762},
	abstract = {This paper is about a fundamental aspect of intentional action, namely the process of goal formation. Existing formal theories of agents are found essentially inadequate to account for the formation of new goals and intentions of the agent; on the other hand, the formation of new goals is often viewed as an essential feature of autonomous agents. Autonomous goal-formation is described thanks to the interplay between existing (built-in) goals and new beliefs. A general rule for goal formation is then formally expressed in terms of a language (FORM) developed for treating properties of autonomous agents. More specific applications of this rule to the social domain are examined, in particular to conformity and help.},
	language = {en},
	booktitle = {Intelligent {Agents} {IV} {Agent} {Theories}, {Architectures}, and {Languages}},
	publisher = {Springer},
	author = {Dignum, Frank and Conte, Rosaria},
	editor = {Singh, Munindar P. and Rao, Anand and Wooldridge, Michael J.},
	year = {1998},
	keywords = {Intentional Agent, Status - Executive Summary, Action Expression, Autonomous Agent, Goal Generation, Production Rule},
	pages = {231--243},
	file = {Springer Full Text PDF:D\:\\Documents\\Zotero\\storage\\U6TRDF6P\\Dignum and Conte - 1998 - Intentional agents and goal formation.pdf:application/pdf}
}

@inproceedings{mccarthy_elaboration_1998,
	title = {Elaboration tolerance},
	volume = {98},
	publisher = {Citeseer},
	author = {McCarthy, John},
	year = {1998},
	keywords = {Status - Executive Summary},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\C2I7626K\\McCarthy - 1998 - Elaboration tolerance.pdf:application/pdf}
}

@article{rao_modeling_1991,
	title = {Modeling rational agents within a {BDI}-architecture.},
	volume = {91},
	journal = {KR},
	author = {Rao, Anand S and Georgeff, Michael P},
	year = {1991},
	keywords = {Status - Overview Contribution, Status - Executive Summary},
	pages = {473--484},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\T8B3T4TW\\Rao and Georgeff - 1991 - Modeling rational agents within a BDI-architecture.pdf:application/pdf}
}

@book{wooldridge_reasoning_2003,
	title = {Reasoning about {Rational} {Agents}},
	isbn = {978-0-262-26502-7},
	abstract = {This book focuses on the belief-desire-intention (BDI) model of rational agents, which recognizes the primacy of beliefs, desires, and intentions in rational action.One goal of modern computer science is to engineer computer programs that can act as autonomous, rational agents; software that can independently make good decisions about what actions to perform on our behalf and execute those actions. Applications range from small programs that intelligently search the Web buying and selling goods via electronic commerce, to autonomous space probes. This book focuses on the belief-desire-intention (BDI) model of rational agents, which recognizes the primacy of beliefs, desires, and intentions in rational action. The BDI model has three distinct strengths: an underlying philosophy based on practical reasoning in humans, a software architecture that is implementable in real systems, and a family of logics that support a formal theory of rational agency.The book introduces a BDI logic called LORA (Logic of Rational Agents). In addition to the BDI component, LORA contains a temporal component, which allows one to represent the dynamics of how agents and their environments change over time, and an action component, which allows one to represent the actions that agents perform and the effects of the actions. The book shows how LORA can be used to capture many components of a theory of rational agency, including such notions as communication and cooperation.},
	language = {en},
	publisher = {MIT Press},
	author = {Wooldridge, Michael},
	month = jan,
	year = {2003},
	note = {Google-Books-ID: jgvFwgzHjR8C},
	keywords = {Computers / Intelligence (AI) \& Semantics}
}

@article{schurr_evolution_2005,
	title = {Evolution of a {Teamwork} {Model}},
	url = {https://kilthub.cmu.edu/articles/Evolution_of_a_Teamwork_Model/6554786},
	doi = {10.1184/R1/6554786.v1},
	abstract = {For heterogeneous agents working together to achieve complex goals, teamwork (Jennings, 1995; Yen, Yin, Ioerger, Miller, Xu, \& Volz, 2001; Tambe, 1997a) has emerged as the dominant coordination paradigm. For domains as diverse as rescue response, military, space, sports and collaboration between human workmates, flexible, dynamic coordination between cooperative agents needs to be achieved despite complex, uncertain, and hostile environments. There is now emerging consensus in the multiagent arena that for flexible teamwork among agents, each team member is provided with an explicit model of teamwork, which entails their commitments and responsibilities as a team member. This explicit modelling allows the coordination to be robust, despite individual failures and unpredictably changing environments.},
	language = {en},
	urldate = {2020-04-08},
	author = {Schurr, Nathan and Okamoto, Steven and Maheswaran, Rajiv T. and Scerri, Paul and Tambe, Milind},
	month = jan,
	year = {2005},
	note = {Publisher: Carnegie Mellon University},
	keywords = {Status - Executive Summary},
	file = {Full Text PDF:D\:\\Documents\\Zotero\\storage\\GXMUQDML\\Schurr et al. - 2005 - Evolution of a Teamwork Model.pdf:application/pdf}
}

@incollection{newell_unified_1992,
	address = {Dordrecht},
	series = {Studies in {Cognitive} {Systems}},
	title = {Unified {Theories} of {Cognition} and the {Role} of {Soar}},
	isbn = {978-94-011-2426-3},
	url = {https://doi.org/10.1007/978-94-011-2426-3_3},
	abstract = {I start this paper by focusing on unified theories of human cognition —what they are and what their general status is in the current scene of cognitive science. Then I consider an exemplar of a unified theory of cognition, namely, the Soar theory and system, which has been developed by my colleagues and myself over almost a decade. I will provide some historical context for Soar and then treat the Soar theory of cognition in somewhat greater detail, selecting several specific topics that should help to appreciate the nature of unified theories of cognition. At the end I will raise a number of general issues that apply concretely to Soar, but in fact apply in analogous form to any candidate unified theory of cognition. As will become apparent, the considerations stated here flow largely from my 1987 William James Lectures on Unified Theories of Cognition (Newell, 1990), but several new issues and results are incorporated.},
	language = {en},
	urldate = {2020-04-08},
	booktitle = {Soar: {A} {Cognitive} {Architecture} in {Perspective}: {A} {Tribute} to {Allen} {Newell}},
	publisher = {Springer Netherlands},
	author = {Newell, Allen},
	editor = {Michon, John A. and Akyürek, Aladin},
	year = {1992},
	doi = {10.1007/978-94-011-2426-3_3},
	keywords = {Cognitive Science, Human Cognition, Intelligent System, Recognition Memory, Unify Theory, Soar model},
	pages = {25--79}
}

@book{newell_unified_1994,
	title = {Unified {Theories} of {Cognition}},
	isbn = {978-0-674-92101-6},
	abstract = {Psychology is now ready for unified theories of cognition--so says Allen Newell, a leading investigator in computer science and cognitive psychology. Not everyone will agree on a single set of mechanisms that will explain the full range of human cognition, but such theories are within reach and we should strive to articulate them. In this book, Newell makes the case for unified theories by setting forth a candidate. After reviewing the foundational concepts of cognitive science--knowledge, representation, computation, symbols, architecture, intelligence, and search--Newell introduces Soar, an architecture for general cognition. A pioneer system in artificial intelligence, Soar is the first problem solver to create its own subgoals and learn continuously from its own experience. Newell shows how Soar's ability to operate within the real-time constraints of intelligent behavior, such as immediate-response and item-recognition tasks, illustrates important characteristics of the human cognitive structure. Throughout, Soar remains an exemplar: we know only enough to work toward a fully developed theory of cognition, but Soar's success so far establishes the viability of the enterprise. Given its integrative approach, Unified Theories of Cognition will be of tremendous interest to researchers in a variety of fields, including cognitive science, artificial intelligence, psychology, and computer science. This exploration of the nature of mind, one of the great problems of philosophy, should also transcend disciplines and attract a large scientific audience.},
	language = {en},
	publisher = {Harvard University Press},
	author = {Newell, Allen},
	year = {1994},
	note = {Google-Books-ID: 1lbY14DmV2cC},
	keywords = {Status - Executive Summary, Psychology / General, Soar model}
}

@article{balduccini_cr-prolog2_2003,
	title = {Cr-prolog2: {Cr}-prolog with ordered disjunction},
	volume = {78},
	journal = {ASP03 Answer Set Programming: Advances in Theory and Implementation},
	author = {Balduccini, Marcello and Mellarkod, Veena S},
	year = {2003},
	keywords = {Status - Executive Summary},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\2SKX9I7S\\Balduccini and Mellarkod - 2003 - Cr-prolog2 Cr-prolog with ordered disjunction.pdf:application/pdf}
}

@inproceedings{balduccini_cr-models_2007,
	title = {{CR}-{MODELS}: {An} inference engine for {CR}-{Prolog}},
	publisher = {Springer},
	author = {Balduccini, Marcello},
	year = {2007},
	keywords = {Status - Executive Summary},
	pages = {18--30},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\7QKBNM55\\Balduccini - 2007 - cr-models An Inference Engine for CR-Prolog.pdf:application/pdf}
}

@article{gustafsson_elaboration_2004,
	series = {Logical {Formalizations} and {Commonsense} {Reasoning}},
	title = {Elaboration tolerance through object-orientation},
	volume = {153},
	issn = {0004-3702},
	url = {http://www.sciencedirect.com/science/article/pii/S0004370203001668},
	doi = {10.1016/j.artint.2003.08.004},
	abstract = {Although many formalisms for reasoning about action and change have been proposed in the literature, any concrete examples provided in such articles have primarily consisted of tiny domains that highlight some particular aspect or problem. However, since some of the classical problems are now completely or partially solved and since powerful tools are becoming available, it is now necessary to start modeling more complex domains. This article presents a methodology for handling such domains in a systematic manner using an object-oriented framework and provides several examples of the elaboration tolerance exhibited by the resulting models.},
	language = {en},
	number = {1},
	urldate = {2020-04-09},
	journal = {Artificial Intelligence},
	author = {Gustafsson, Joakim and Kvarnström, Jonas},
	month = mar,
	year = {2004},
	keywords = {Status - Executive Summary, Domain modeling, Elaboration tolerance, Object-orientation},
	pages = {239--285},
	file = {ScienceDirect Snapshot:D\:\\Documents\\Zotero\\storage\\DF8BDMN6\\S0004370203001668.html:text/html;ScienceDirect Full Text PDF:D\:\\Documents\\Zotero\\storage\\7SNM8JQL\\Gustafsson and Kvarnström - 2004 - Elaboration tolerance through object-orientation.pdf:application/pdf}
}

@inproceedings{cimatti_multiagent_1995,
	title = {Multiagent reasoning with belief contexts {II}: {Elaboration} tolerance},
	author = {Cimatti, Alessandro and Serafini, Luciano},
	year = {1995},
	keywords = {Status - Executive Summary},
	pages = {57--64},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\FIDTC4K8\\Cimatti and Serafini - 1995 - Multiagent reasoning with belief contexts II Elab.pdf:application/pdf}
}

@article{gelfond_towards_1996,
	title = {Towards a theory of elaboration tolerance: logic programming approach},
	volume = {06},
	issn = {0218-1940},
	shorttitle = {Towards a theory of elaboration tolerance},
	url = {https://www.worldscientific.com/doi/abs/10.1142/S0218194096000053},
	doi = {10.1142/S0218194096000053},
	abstract = {This paper is an attempt at mathematical investigation of software development process in the context of declarative logic programming. We introduce notions of specification and specification constructor which are developed from natural language description of a problem. Generalizations of logic programs, called lp-functions are introduced to represent these specifications. We argue that the process of constructing lp-function representing a specification S should be supported by certain types of mathematical results which we call representation theorems. We present two such theorems to illustrate the idea.},
	number = {01},
	urldate = {2020-04-09},
	journal = {International Journal of Software Engineering and Knowledge Engineering},
	author = {Gelfond, Michael and Przymusinska, Halina},
	month = mar,
	year = {1996},
	note = {Publisher: World Scientific Publishing Co.},
	keywords = {Status - Executive Summary},
	pages = {89--112},
	file = {Snapshot:D\:\\Documents\\Zotero\\storage\\J292UW7B\\S0218194096000053.html:text/html;Submitted Version:D\:\\Documents\\Zotero\\storage\\YG5232Z6\\Gelfond and Przymusinska - 1996 - Towards a theory of elaboration tolerance logic p.pdf:application/pdf}
}

@article{parmar_formalizing_2003,
	title = {Formalizing elaboration tolerance},
	author = {Parmar, Aarati},
	year = {2003},
	note = {Publisher: stanford university},
	keywords = {Status - Executive Summary, Elaboration tolerance, Status - Referenced},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\26AH3KWR\\Parmar - 2003 - Formalizing elaboration tolerance.pdf:application/pdf}
}

@book{baral_knowledge_2003,
	title = {Knowledge {Representation}, {Reasoning} and {Declarative} {Problem} {Solving}},
	isbn = {978-1-139-43644-1},
	abstract = {Knowledge management and knowledge-based intelligence are areas of importance in the economy and society, and to exploit them fully and efficiently it is necessary both to represent and reason about knowledge via a declarative interface whose input language is based on logic. In this book, originally published in 2003, Chitta Baral shows exactly how to go about doing that: how to write programs that behave intelligently by giving them the ability to express knowledge and reason about it. He presents a language, AnsProlog, for both knowledge representation and reasoning, and declarative problem solving. The results have been organised here into a form that will appeal to practising and would-be knowledge engineers wishing to learn more about the subject, either in courses or through self-teaching. A comprehensive bibliography rounds off the book.},
	language = {en},
	publisher = {Cambridge University Press},
	author = {Baral, Chitta},
	month = jan,
	year = {2003},
	note = {Google-Books-ID: iTS4ZdEpGZQC},
	keywords = {Status - Executive Summary, Computers / Programming Languages / General, Mathematics / Discrete Mathematics}
}

@inproceedings{gelfond_stable_1988,
	title = {The stable model semantics for logic programming.},
	volume = {88},
	author = {Gelfond, Michael and Lifschitz, Vladimir},
	year = {1988},
	keywords = {Status - Executive Summary},
	pages = {1070--1080},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\2X84UYZU\\Gelfond and Lifschitz - 1988 - The stable model semantics for logic programming..pdf:application/pdf}
}

@inproceedings{bandara_toward_2007,
	title = {Toward a formal characterization of policy specification \& analysis},
	author = {Bandara, Arosha and Calo, Seraphin and Lobo, Jorge and Lupu, Emil and Russo, Alessandra and Sloman, Morris},
	year = {2007},
	keywords = {Status - Executive Summary},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\9522S85C\\Bandara et al. - 2007 - Toward a formal characterization of policy specifi.pdf:application/pdf}
}

@article{weidlich_process_2011,
	series = {Special {Issue}: {Advanced} {Information} {Systems} {Engineering} ({CAiSE}'10)},
	title = {Process compliance analysis based on behavioural profiles},
	volume = {36},
	issn = {0306-4379},
	url = {http://www.sciencedirect.com/science/article/pii/S0306437911000536},
	doi = {10.1016/j.is.2011.04.002},
	abstract = {Process compliance measurement is getting increasing attention in companies due to stricter legal requirements and market pressure for operational excellence. In order to judge on compliance of the business processing, the degree of behavioural deviation of a case, i.e., an observed execution sequence, is quantified with respect to a process model (referred to as fitness, or recall). Recently, different compliance measures have been proposed. Still, nearly all of them are grounded on state-based techniques and the trace equivalence criterion, in particular. As a consequence, these approaches have to deal with the state explosion problem. In this paper, we argue that a behavioural abstraction may be leveraged to measure the compliance of a process log – a collection of cases. To this end, we utilise causal behavioural profiles that capture the behavioural characteristics of process models and cases, and can be computed efficiently. We propose different compliance measures based on these profiles, discuss the impact of noise in process logs on our measures, and show how diagnostic information on non-compliance is derived. As a validation, we report on findings of applying our approach in a case study with an international service provider.},
	language = {en},
	number = {7},
	urldate = {2020-04-10},
	journal = {Information Systems},
	author = {Weidlich, Matthias and Polyvyanyy, Artem and Desai, Nirmit and Mendling, Jan and Weske, Mathias},
	month = nov,
	year = {2011},
	keywords = {Status - Executive Summary, Compliance measurement, Log conformance, Process compliance, Root cause analysis},
	pages = {1009--1025},
	file = {ScienceDirect Snapshot:D\:\\Documents\\Zotero\\storage\\TT9M3FX9\\S0306437911000536.html:text/html;ScienceDirect Full Text PDF:D\:\\Documents\\Zotero\\storage\\ZEVGWATD\\Weidlich et al. - 2011 - Process compliance analysis based on behavioural p.pdf:application/pdf}
}

@article{liao_angle_2010,
	series = {Including {Special} {Section} on {Virtual} {Agent} and {Organization} {Modeling}: {Theory} and {Applications}},
	title = {{ANGLE}: {An} autonomous, normative and guidable agent with changing knowledge},
	volume = {180},
	issn = {0020-0255},
	shorttitle = {{ANGLE}},
	url = {http://www.sciencedirect.com/science/article/pii/S0020025510001295},
	doi = {10.1016/j.ins.2010.03.017},
	abstract = {Some emerging computing systems (especially autonomic computing systems) raise several challenges to autonomous agents, including (1) how to reflect the dynamics of business requirements, (2) how to coordinate with external agents with sufficient level of security and predictability, and (3) how to perform reasoning with dynamic and incomplete knowledge, including both informational knowledge (observations) and motivational knowledge (for example, policy rules and contract rules). On the basis of defeasible logic and argumentation, this paper proposes an autonomous, normative and guidable agent model, called ANGLE, to cope with these challenges. This agent is established by combining beliefs–desires–intentions (BDI) architecture with policy-based method and the mechanism of contract-based coordination. Its architecture, knowledge representation, as well as reasoning and decision-making, are presented in this paper. ANGLE is characteristic of the following three aspects. First, both its motivational knowledge and informational knowledge are changeable, and allowed to be incomplete, inconsistent/conflicting. Second, its knowledge is represented in terms of extended defeasible logic with modal operators. Different from the existing defeasible theories, its theories (including belief theory, goal theory and intention theory) are dynamic (called dynamic theories), reflecting the variations of observations and external motivational knowledge. Third, its reasoning and decision-making are based on argumentation. Due to the dynamics of underlying theories, argument construction is not a monotonic process, which is different from the existing argumentation framework where arguments are constructed incrementally.},
	language = {en},
	number = {17},
	urldate = {2020-04-10},
	journal = {Information Sciences},
	author = {Liao, Beishui and Huang, Huaxin},
	month = sep,
	year = {2010},
	keywords = {Status - Executive Summary, Argumentation, Autonomous agents, Defeasible logic, Non-monotonic reasoning, Normative agents, Policy-based management, ANGLE architecture},
	pages = {3117--3139},
	file = {ScienceDirect Snapshot:D\:\\Documents\\Zotero\\storage\\MIJ8C2HE\\S0020025510001295.html:text/html;ScienceDirect Full Text PDF:D\:\\Documents\\Zotero\\storage\\4ZAUPVTB\\Liao and Huang - 2010 - ANGLE An autonomous, normative and guidable agent.pdf:application/pdf}
}

@article{sabri_temporal_2016,
	title = {A temporal defeasible logic for handling access control policies},
	volume = {44},
	issn = {1573-7497},
	url = {https://doi.org/10.1007/s10489-015-0692-8},
	doi = {10.1007/s10489-015-0692-8},
	abstract = {Access control policies are specified within systems to ensure confidentiality of their information. Available knowledge about policies is usually incomplete and uncertain. An essential goal in reasoning is to reach conclusions which can be justified. However, since justification does not necessarily guarantee truth, the best we can do is to derive “plausible/ tentative” conclusions from partial and conflicting information. Policies are typically expressed as rules that could be complex and include timing constraints. Complex sets of access policies can contain conflicts e.g., a rule allows access while another rule prevents it. In this paper, we aim at providing a formalism for specifying authorization policies of a dynamic system. We present a temporal defeasible logic (TDL) which allows us to specify temporal policies and to handle conflicts. It can be shown that the proposed model is a generalization of the role-based access control model.},
	language = {en},
	number = {1},
	urldate = {2020-04-10},
	journal = {Applied Intelligence},
	author = {Sabri, Khair Eddin and Obeid, Nadim},
	month = jan,
	year = {2016},
	keywords = {Status - Executive Summary},
	pages = {30--42},
	file = {Springer Full Text PDF:D\:\\Documents\\Zotero\\storage\\53R4GE2Z\\Sabri and Obeid - 2016 - A temporal defeasible logic for handling access co.pdf:application/pdf}
}

@incollection{barker_logical_2012,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Logical {Approaches} to {Authorization} {Policies}},
	isbn = {978-3-642-29414-3},
	url = {https://doi.org/10.1007/978-3-642-29414-3_19},
	abstract = {We show how core concepts in access control can be represented in axiomatic terms and how multiple access control models and policies can be uniformly represented as particular logical theories in the axiom system that we introduce. Authorization policies are represented in our framework by using a form of answer set programming. We describe the motivations for our approach and we consider how properties of policies can be proven in our scheme.},
	language = {en},
	urldate = {2020-04-10},
	booktitle = {Logic {Programs}, {Norms} and {Action}: {Essays} in {Honor} of {Marek} {J}. {Sergot} on the {Occasion} of {His} 60th {Birthday}},
	publisher = {Springer},
	author = {Barker, Steve},
	editor = {Artikis, Alexander and Craven, Robert and Kesim Çiçekli, Nihan and Sadighi, Babak and Stathis, Kostas},
	year = {2012},
	doi = {10.1007/978-3-642-29414-3_19},
	keywords = {Status - Executive Summary, Access Control, Access Control Model, Access Control Policy, Logic Programming, Logic Programming Language},
	pages = {349--373},
	file = {Springer Full Text PDF:D\:\\Documents\\Zotero\\storage\\94I6RACV\\Barker - 2012 - Logical Approaches to Authorization Policies.pdf:application/pdf}
}

@article{barker_reasoning_2014,
	title = {Reasoning about delegation and revocation schemes in answer set programming},
	volume = {24},
	issn = {0955-792X},
	url = {https://academic.oup.com/logcom/article/24/1/89/1076059},
	doi = {10.1093/logcom/exs014},
	abstract = {Abstract.  In this article we show how to model a range of notions in the context of delegation and revocation applied to security scenarios. We demonstrate how},
	language = {en},
	number = {1},
	urldate = {2020-04-10},
	journal = {Journal of Logic and Computation},
	author = {Barker, Steve and Boella, Guido and Gabbay, Dov and Genovese, Valerio},
	month = feb,
	year = {2014},
	note = {Publisher: Oxford Academic},
	keywords = {Status - Executive Summary},
	pages = {89--116},
	file = {Snapshot:D\:\\Documents\\Zotero\\storage\\4ID8H7BJ\\1076059.html:text/html;Full text PDF:D\:\\Documents\\Zotero\\storage\\8WJLIYP4\\Barker et al. - 2014 - Reasoning about delegation and revocation schemes .pdf:application/pdf}
}

@article{alves_graph-based_2017,
	series = {Logical and {Semantic} {Frameworks} with {Applications}},
	title = {A graph-based framework for the analysis of access control policies},
	volume = {685},
	issn = {0304-3975},
	url = {http://www.sciencedirect.com/science/article/pii/S0304397516305965},
	doi = {10.1016/j.tcs.2016.10.018},
	abstract = {We design a graph-based framework for the analysis of access control policies that aims at easing the specification and verification tasks for security administrators. We consider policies in the category-based access control model, which has been shown to subsume many of the most well known access control models (e.g., MAC, DAC, RBAC). Using a graphical representation of category-based policies, we show how answers to usual administrator queries can be automatically computed, and properties of access control policies checked. We show applications in the context of emergency situations, where our framework can be used to analyse the interaction between access control and emergency management.},
	language = {en},
	urldate = {2020-04-10},
	journal = {Theoretical Computer Science},
	author = {Alves, Sandra and Fernández, Maribel},
	month = jul,
	year = {2017},
	keywords = {Status - Executive Summary, Access control, Graph-based analysis, Operational semantics, Security policies},
	pages = {3--22},
	file = {ScienceDirect Snapshot:D\:\\Documents\\Zotero\\storage\\PPLS4R5J\\S0304397516305965.html:text/html;ScienceDirect Full Text PDF:D\:\\Documents\\Zotero\\storage\\5XVESYCX\\Alves and Fernández - 2017 - A graph-based framework for the analysis of access.pdf:application/pdf}
}

@article{inclezan_modular_2016,
	title = {Modular action language $\mathcal{ALM}$},
	volume = {16},
	issn = {1471-0684, 1475-3081},
	url = {https://www.cambridge.org/core/journals/theory-and-practice-of-logic-programming/article/modular-action-language-mathcal-alm/52959687BBF3AC7D4EF410A083CB4263},
	doi = {10.1017/S1471068415000095},
	abstract = {The paper introduces a new modular action language,




\$\{{\textbackslash}mathcal ALM\}\$



, and illustrates the methodology of its use. It is based on the approach of Gelfond and Lifschitz (1993, Journal of Logic Programming 17, 2–4, 301–321; 1998, Electronic Transactions on AI 3, 16, 193–210) in which a high-level action language is used as a front end for a logic programming system description. The resulting logic programming representation is used to perform various computational tasks. The methodology based on existing action languages works well for small and even medium size systems, but is not meant to deal with larger systems that require structuring of knowledge.




\${\textbackslash}mathcal\{ALM\}\$



 is meant to remedy this problem. Structuring of knowledge in




\$\{{\textbackslash}mathcal ALM\}\$



 is supported by the concepts of module (a formal description of a specific piece of knowledge packaged as a unit), module hierarchy, and library, and by the division of a system description of




\$\{{\textbackslash}mathcal ALM\}\$



 into two parts: theory and structure. A theory consists of one or more modules with a common theme, possibly organized into a module hierarchy based on a dependency relation. It contains declarations of sorts, attributes, and properties of the domain together with axioms describing them. Structures are used to describe the domain's objects. These features, together with the means for defining classes of a domain as special cases of previously defined ones, facilitate the stepwise development, testing, and readability of a knowledge base, as well as the creation of knowledge representation libraries.},
	language = {en},
	number = {2},
	urldate = {2020-04-10},
	journal = {Theory and Practice of Logic Programming},
	author = {Inclezan, Daniela and Gelfond, Michael},
	month = mar,
	year = {2016},
	note = {Publisher: Cambridge University Press},
	keywords = {Status - Executive Summary, action language, logic programming, reasoning about actions and change, Action language (ALM), Status - Referenced},
	pages = {189--235},
	file = {Snapshot:D\:\\Documents\\Zotero\\storage\\Y288ZLP7\\52959687BBF3AC7D4EF410A083CB4263.html:text/html;Submitted Version:D\:\\Documents\\Zotero\\storage\\GVQMS46S\\Inclezan and Gelfond - 2016 - Modular action language \$ mathcal ALM \$.pdf:application/pdf}
}

@inproceedings{balduccini_asp-based_2014,
	title = {An {ASP}-{Based} {Architecture} for {Autonomous} {UAVs} in {Dynamic} {Environments}: {Progress} {Report}},
	url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.636.7779&rep=rep1&type=pdf#page=256},
	publisher = {Citeseer},
	author = {Balduccini, Marcello and Regli, William C and Nguyen, Duc N},
	year = {2014},
	keywords = {Status - Executive Summary},
	pages = {242},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\FEK2T836\\Balduccini et al. - 2014 - An ASP-Based Architecture for Autonomous UAVs in D.pdf:application/pdf}
}

@inproceedings{herzig_refinement_2016,
	address = {Cham},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Refinement of {Intentions}},
	isbn = {978-3-319-48758-8},
	doi = {10.1007/978-3-319-48758-8_39},
	abstract = {According to Bratman, future-directed intentions are high-level plans. We view such plans as high-level actions that can typically not be executed directly: they have to be progressively refined until executable basic actions are obtained. Higher- and lower-level actions are linked by the means-end relation, alias instrumentality relation. In this paper we extend Shoham’s database perspective of Bratman’s theory by the notions of refinement and instrumentality.},
	language = {en},
	booktitle = {Logics in {Artificial} {Intelligence}},
	publisher = {Springer International Publishing},
	author = {Herzig, Andreas and Perrussel, Laurent and Xiao, Zhanhao and Zhang, Dongmo},
	editor = {Michael, Loizos and Kakas, Antonis},
	year = {2016},
	keywords = {Status - Executive Summary, Bratman's theory},
	pages = {558--563},
	file = {Accepted Version:D\:\\Documents\\Zotero\\storage\\JV9Q4AWL\\Herzig et al. - 2016 - Refinement of Intentions.pdf:application/pdf;Long Version:D\:\\Documents\\Zotero\\storage\\KCT398UV\\Jelia16db_long.pdf:application/pdf}
}

@book{bordini_multi-agent_2009,
	title = {Multi-{Agent} {Programming}},
	isbn = {1-282-28812-1},
	publisher = {Springer},
	author = {Bordini, Rafael H and Dastani, Mehdi and Dix, Jürgen and Seghrouchni, Amal El Fallah},
	year = {2009},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\A24PNQ59\\Bordini et al. - 2009 - Multi-Agent Programming.pdf:application/pdf}
}

@article{balke_how_2014,
	title = {How {Do} {Agents} {Make} {Decisions}? {A} {Survey}},
	volume = {17},
	issn = {1460-7425},
	shorttitle = {How {Do} {Agents} {Make} {Decisions}?},
	url = {http://jasss.soc.surrey.ac.uk/17/4/13.html},
	number = {4},
	journal = {Journal of Artificial Societies and Social Simulation},
	author = {Balke, Tina and Gilbert, Nigel},
	year = {2014},
	keywords = {Status - Overview Contribution, Status - Executive Summary, BDI architecture, Soar model, BOID architecture, Emotional BDI (eBDI) architecture, BRIDGE architecture, Deliberate Normative Agents, EMIL-A, NoA, PECS, Consumat, Model Human Processor (MHP), CLARION, ACT-R/PM, Status - Referenced},
	pages = {13},
	file = {How Do Agents Make Decisions?:D\:\\Documents\\Zotero\\storage\\WZF7C633\\13.html:text/html;Full text PDF:D\:\\Documents\\Zotero\\storage\\9B5JWYBW\\Balke and Gilbert - 2014 - How Do Agents Make Decisions A Survey.pdf:application/pdf}
}

@inproceedings{blake_rule-driven_2001,
	title = {Rule-driven coordination agents: a self-configurable agent architecture for distributed control},
	shorttitle = {Rule-driven coordination agents},
	doi = {10.1109/ISADS.2001.917428},
	abstract = {The need for coordination among autonomous entities is common in dynamically changing domains. One such domain is the coordination of components in distributed component architectures. In these architectures, asynchronous communication is used to ensure autonomy. Management systems that control such architectures must respect this autonomy by decentralizing interaction policies and control. Middle agents (Decker et al., 1997) have been introduced as brokers or mediators in such dynamic settings. Rule-driven coordination (RDC) agents are middle agents that act as brokers to the individual components in component architectures. These RDC agents encapsulate the interaction policy definition (rules) and the aspects of communication, data management, and policy execution. This paper defines each of these aforementioned aspects of the RDC agents. Furthermore, there is the use of RDC agents to manage a workflow of Java-based components in a typical electronic commerce domain.},
	booktitle = {Proceedings 5th {International} {Symposium} on {Autonomous} {Decentralized} {Systems}},
	author = {Blake, M.B.},
	month = mar,
	year = {2001},
	keywords = {Computer science, Status - Executive Summary, asynchronous communication, Communication system control, Component architectures, Computer architecture, Control systems, data management, Databases, distributed component architectures, distributed control, Distributed control, distributed processing, electronic commerce, Electronic commerce, interaction policy definition, Java, Java-based components, middle agents, Middleware, multi agent systems, multi-agent systems, Portfolios, rule-driven coordination agents, self-configurable agent architecture, software architecture, workflow management software, Rule-Driven Coordination (RDC) agent architecture},
	pages = {271--277},
	file = {IEEE Xplore Abstract Record:D\:\\Documents\\Zotero\\storage\\MZ5U5YWN\\917428.html:text/html;Full text PDF:D\:\\Documents\\Zotero\\storage\\5MD5DTP9\\Blake - 2001 - Rule-driven coordination agents a self-configurab.pdf:application/pdf}
}

@inproceedings{peng_extended_2008,
	title = {An {Extended} {Agent} {BDI} {Model} with {Norms}, {Policies} and {Contracts}},
	doi = {10.1109/WiCom.2008.1197},
	abstract = {It is important to constitute agent with motivation in agent-based computing. Recent study of the definition of motivation and its effects on reasoning mechanism of agent are not complete. This paper presents a model of agent based on norms, policies and contracts, in which the motivation from external environment can be explicitly expressed and integrated into agent's reasoning process. In order to conduct nonmonotonic reasoning abilities, defeasible logic is imported. The extended agent BDI model (NPCD-agent), relevant BGINPCD logic and reasoning mechanism is the core of this system, which is formally specified in this paper.},
	booktitle = {2008 4th {International} {Conference} on {Wireless} {Communications}, {Networking} and {Mobile} {Computing}},
	author = {Peng, Yan-Bin and Gao, Ji and Ai, Jie-Qin and Wang, Cun-Hao and Guo, Hang},
	month = oct,
	year = {2008},
	note = {ISSN: 2161-9654},
	keywords = {Computer science, Status - Executive Summary, multi-agent systems, agent-based computing, Contracts, defeasible logic, Educational institutions, extended agent BDI model, inference mechanisms, Logic, nonmonotonic reasoning abilities, NPCD-agent, Predictive models, reasoning mechanism, relevant BGINPCD logic, BDI architecture, Policies},
	pages = {1--4},
	file = {IEEE Xplore Abstract Record:D\:\\Documents\\Zotero\\storage\\AT3B5TB9\\4679105.html:text/html;Full text PDF:D\:\\Documents\\Zotero\\storage\\FJYDAJVU\\Peng et al. - 2008 - An Extended Agent BDI Model with Norms, Policies a.pdf:application/pdf}
}

@phdthesis{nikander_architecture_1999,
	title = {An architecture for authorization and delegation in distributed object-oriented agent systems},
	abstract = {Public key infrastructures and authentication protocols, in the sense they are currently known, have been publicly studied since 1978 [23]. In this work I demonstrate how I, together with the research group I have had the privilege to direct, have further developed these concepts in the Object-Oriented field. In our research, we have implemented a public key based system that allows distributed agents to securely co-operate in an insecure network.
In this thesis, I focus on the following four interrelated aspects. First, I define a concrete secure software architecture for distributed software agents. Second, I describe our implementation of an Object-Oriented protocol framework for cryptographic protocols. Third, I show how an authorization based Public Key Infrastructure can be used to manage the security of Java based, Object-Oriented software Agents. And finally, I describe how this infrastructure can be extended to support distributed, secure agent execution and permission delegation. In the work as a whole, my goal has been an open, extensible security architecture that allows distributed software agents to co-operate securely. In this context, security1 mainly means two things. First, the agents must be able to trust in the underlying computing machinery, and also trust in each other. Second, the agents must be able to delegate rights among themselves, and to create secure connections between any two communicating agents.
The distributed secure software architecture can be considered a high level framework where the protocol framework and the Public Key Infrastructure (PKI) plug in. It defines the security related subsystems for typical Object-Oriented execution environments, focusing on distribution and thereby cryptographic means of implementing security. The Object-Oriented protocol framework provides a supportive base, on top of which various cryptographic protocols can be built. In this sense, cryptographic protocols include both session encryption protocols used to protect actual data traffic between communicating parties and key management and authentication protocols, used to create secure channels used for the actual data transfer.
The Public Key Infrastructure (PKI) is needed to provide sufficient trust relationships and an initial security context to the communicating parties so that the authentication and key management protocols can be operated. In this work, my sole focus has been on an authorization based (as opposed to identity based) PKI. In practical terms, this means that the secure channels created within such an authorization framework automatically get strong relationship semantics, providing the communicating parties explicit information about the level and form of trust mediated.
Finally, the architecture with its protocol and PKI components makes it possible to create Object-Oriented software agents, distribute them into the network, and let them collaborate in a secure way. In our system, agents are represented as collections (JAR packages) of Java classes. The agent code may be loaded into a trusted Java Virtual Machine, where it is run. The running agents are able to create and evaluate trust relationships between each other, allowing dynamic delegation and creation of secure communication channels.},
	school = {Helsinki University of Technology},
	author = {Nikander, Pekka},
	year = {1999},
	note = {Publisher: P. Nikander},
	keywords = {Status - Executive Summary, Status - Going to ignore},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\ID2CS4XS\\Nikander - 1999 - An architecture for authorization and delegation i.pdf:application/pdf}
}

@phdthesis{liu_improving_2015,
	title = {Improving cloud system reliability using autonomous agent technology},
	abstract = {Cloud computing platforms provide efficient and flexible ways to offer services and computation facilities to users. Service providers acquire resources according to their requirements and deploy their services in cloud. Service consumers can access services over networks. In cloud computing, virtualization techniques allow cloud providers provide computation and storage resources according to users’ requirement. However, reliability in the cloud is an important factor to measure the performance of a virtualized cloud computing platform. Reliability in cloud computing includes the usability and availability. Usability is defined as cloud computing platform provides functional and easy-to-use computation resources to users. In order to ensure usability, configurations and management policies have to be maintained and deployed by cloud computing providers. Availability of cloud is defined as cloud computing platform provides stable and reliable computation resources to users. My research concentrates on improving usability and availability of cloud computing platforms. I proposed a customized agentbased reliability monitoring framework to increase reliability of cloud computing.},
	school = {University of Bridgeport},
	author = {Liu, Yuanyao},
	year = {2015},
	note = {Publisher: University of Bridgeport},
	keywords = {Status - Executive Summary, Status - Going to ignore},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\WV29BEFL\\Liu - 2015 - Improving cloud system reliability using autonomou.pdf:application/pdf}
}

@article{gelfond_logic_2002,
	series = {Knowledge {Representation} and {Logic} {Programming}},
	title = {Logic programming and knowledge representation—{The} {A}-{Prolog} perspective},
	volume = {138},
	issn = {0004-3702},
	url = {http://www.sciencedirect.com/science/article/pii/S0004370202002072},
	doi = {10.1016/S0004-3702(02)00207-2},
	abstract = {In this paper we give a short introduction to logic programming approach to knowledge representation and reasoning. The intention is to help the reader to develop a ‘feel’ for the field's history and some of its recent developments. The discussion is mainly limited to logic programs under the answer set semantics. For understanding of approaches to logic programming built on well-founded semantics, general theories of argumentation, abductive reasoning, etc., the reader is referred to other publications.},
	language = {en},
	number = {1},
	urldate = {2020-04-11},
	journal = {Artificial Intelligence},
	author = {Gelfond, Michael and Leone, Nicola},
	month = jun,
	year = {2002},
	keywords = {Status - Executive Summary, A-Prolog, Answer set programming, Default reasoning, Logic programming, Nonmonotonic reasoning},
	pages = {3--38},
	file = {ScienceDirect Snapshot:D\:\\Documents\\Zotero\\storage\\IMIIPHET\\S0004370202002072.html:text/html;ScienceDirect Full Text PDF:D\:\\Documents\\Zotero\\storage\\77JJY9ZY\\Gelfond and Leone - 2002 - Logic programming and knowledge representation—The.pdf:application/pdf}
}

@article{gelfond_classical_1991,
	title = {Classical negation in logic programs and disjunctive databases},
	volume = {9},
	issn = {1882-7055},
	url = {https://doi.org/10.1007/BF03037169},
	doi = {10.1007/BF03037169},
	abstract = {An important limitation of traditional logic programming as a knowledge representation tool, in comparison with classical logic, is that logic programming does not allow us to deal directly with incomplete information. In order to overcome this limitation, we extend the class of general logic programs by including classical negation, in addition to negation-as-failure. The semantics of such extended programs is based on the method of stable models. The concept of a disjunctive database can be extended in a similar way. We show that some facts of commonsense knowledge can be represented by logic programs and disjunctive databases more easily when classical negation is available. Computationally, classical negation can be eliminated from extended programs by a simple preprocessor. Extended programs are identical to a special case of default theories in the sense of Reiter.},
	language = {en},
	number = {3},
	urldate = {2020-04-11},
	journal = {New Generation Computing},
	author = {Gelfond, Michael and Lifschitz, Vladimir},
	month = aug,
	year = {1991},
	keywords = {Status - Executive Summary},
	pages = {365--385},
	file = {Submitted Version:D\:\\Documents\\Zotero\\storage\\2FVWRV5H\\Gelfond and Lifschitz - 1991 - Classical negation in logic programs and disjuncti.pdf:application/pdf}
}

@article{osorio_logical_2002,
	series = {{WoLLIC}'2002, 9th {Workhop} on {Logic}, {Language}, {Information} and {Computation}},
	title = {A logical approach to {A}-{Prolog}},
	volume = {67},
	issn = {1571-0661},
	url = {http://www.sciencedirect.com/science/article/pii/S1571066104805541},
	doi = {10.1016/S1571-0661(04)80554-1},
	abstract = {It has been recently provided a characterization of Answer Sets by intuitionistic logic as follows: a literal is entailed by a program in the stable model semantics if and only if it belongs to every intuitionistically complete and consistent extension of the program formed by adding only negated literals. We show that if we replace intuitionistic logic by any si-logic the result still holds.},
	language = {en},
	urldate = {2020-04-11},
	journal = {Electronic Notes in Theoretical Computer Science},
	author = {Osorio, Mauricio and Navarro, Juan Antonio and Arrazola, José},
	month = oct,
	year = {2002},
	keywords = {Status - Executive Summary, A-Prolog, A-prolog, answer sets, stable semantics},
	pages = {284--295},
	file = {ScienceDirect Snapshot:D\:\\Documents\\Zotero\\storage\\NAIT3TTH\\S1571066104805541.html:text/html;ScienceDirect Full Text PDF:D\:\\Documents\\Zotero\\storage\\TA553A2T\\Osorio et al. - 2002 - A logical approach to A-Prolog.pdf:application/pdf}
}

@article{brewka_logic_2004,
	title = {Logic {Programs} with {Ordered} {Disjunction}},
	volume = {20},
	issn = {1467-8640},
	url = {https://onlinelibrary.wiley.com/doi/abs/10.1111/j.0824-7935.2004.00241.x},
	doi = {10.1111/j.0824-7935.2004.00241.x},
	abstract = {Logic programs with ordered disjunction (LPODs) contain a new connective which allows representing alternative, ranked options for problem solutions in the heads of rules: A×B intuitively means that if possible A, but if A is not possible, then at least B. The semantics of logic programs with ordered disjunction is based on a preference relation on answer sets. We show how LPODs can be implemented using answer set solvers for normal programs. The implementation is based on a generator, which produces candidate answer sets and a tester which checks whether a given candidate is maximally preferred and produces a better candidate if it is not. We also discuss the complexity of reasoning tasks based on LPODs and possible applications.},
	language = {en},
	number = {2},
	urldate = {2020-04-11},
	journal = {Computational Intelligence},
	author = {Brewka, Gerhard and Niemelä, Ilkka and Syrjänen, Tommi},
	year = {2004},
	note = {\_eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1111/j.0824-7935.2004.00241.x},
	keywords = {Status - Executive Summary, answer set semantics, logic programs, priorities, qualitative preferences},
	pages = {335--357},
	file = {Snapshot:D\:\\Documents\\Zotero\\storage\\6A6XZGHF\\j.0824-7935.2004.00241.html:text/html;Full text PDF:D\:\\Documents\\Zotero\\storage\\CUQHL7LD\\Brewka et al. - 2004 - Logic Programs with Ordered Disjunction.pdf:application/pdf}
}

@inproceedings{buccafurri_adding_1997,
	title = {Adding {Weak} {Constraints} to {Disjunctive} {Datalog}.},
	author = {Buccafurri, Francesco and Leone, Nicola and Rullo, Pasquale},
	year = {1997},
	keywords = {Status - Executive Summary, Disjunctive Datalog},
	pages = {557--568},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\AQVGYKTZ\\Buccafurri et al. - 1997 - Adding Weak Constraints to Disjunctive Datalog..pdf:application/pdf}
}

@inproceedings{faber_aggregate_2003,
	title = {Aggregate functions in disjunctive logic programming: {Semantics}, complexity, and implementation in {DLV}},
	shorttitle = {Aggregate functions in disjunctive logic programming},
	abstract = {Disjunctive Logic Programming (DLP) is a very expressive formalism: it allows to express every property of finite structures that is decidable in the complexity class E {\textasciicircum} (NP NH). Despite the high expressiveness of DLP, there are some simple properties, often arising in real-world applications, which cannot be encoded in a simple and natural manner. Among these, properties requiring to apply some arithmetic operators (like sum, times, count) on a set of elements satisfying some conditions, cannot be naturally expressed in DLP. To overcome this deficiency, in this paper we extend DLP by aggregate functions. We formally define the semantics of the new language, named DLP- 4. We show the usefulness of the new constructs on relevant knowledge-based problems. We analyze the computational complexity of DLP \&quot; 4, showing that the addition of aggregates does not bring a higher cost in that respect. We provide an implementation of the DLP- 4 language in DLV- the state-of-theart DLP system- and report on experiments which confirm the usefulness of the proposed extension also for the efficiency of the computation.},
	booktitle = {In {Proceedings} of the 18th {International} {Joint} {Conference} on {Artificial} {Intelligence} ({IJCAI}-2003},
	publisher = {Morgan Kaufmann},
	author = {Faber, Wolfgang and Wien, Tu and Leone, Nicola and Pfeifer, Gerald},
	year = {2003},
	keywords = {Status - Executive Summary, DLP-4, Disjuncive Logic Programming (DLP)},
	pages = {847--852},
	file = {Citeseer - Snapshot:D\:\\Documents\\Zotero\\storage\\YK2W7EFL\\summary.html:text/html;Citeseer - Full Text PDF:D\:\\Documents\\Zotero\\storage\\DSEIU3G2\\Faber et al. - 2003 - Aggregate functions in disjunctive logic programmi.pdf:application/pdf}
}

@incollection{gelfond_representing_2002,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Representing {Knowledge} in {A}-{Prolog}},
	isbn = {978-3-540-45632-2},
	url = {https://doi.org/10.1007/3-540-45632-5_16},
	abstract = {In this paper, we review some recent work on declarative logic programming languages based on stable models/answer sets semantics of logic programs. These languages, gathered together under the name of A-Prolog, can be used to represent various types of knowledge about the world. By way of example we demonstrate how the corresponding representations together with inference mechanisms associated with A-Prolog can be used to solve various programming tasks.},
	language = {en},
	urldate = {2020-04-11},
	booktitle = {Computational {Logic}: {Logic} {Programming} and {Beyond}: {Essays} in {Honour} of {Robert} {A}. {Kowalski} {Part} {II}},
	publisher = {Springer},
	author = {Gelfond, Michael},
	editor = {Kakas, Antonis C. and Sadri, Fariba},
	year = {2002},
	doi = {10.1007/3-540-45632-5_16},
	keywords = {Status - Executive Summary, Logic Program, A-Prolog, Logic Programming, Default Theory, Predicate Symbol, Stable Model},
	pages = {413--451},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\TN9X5MC7\\Gelfond - 2002 - Representing Knowledge in A-Prolog.pdf:application/pdf}
}

@phdthesis{mellarkod_optimizing_2002,
	type = {Thesis},
	title = {Optimizing the computation of stable models using merged rules},
	copyright = {Unrestricted.},
	url = {https://ttu-ir.tdl.org/handle/2346/10219},
	abstract = {Recently, logic programs under the stable model semantics, have emerged as a new paradigm for declarative programming. In this new approach, a logic program is used to represent the knowledge of the domain, and various tasks are reduced to computing the stable models of this program. This paradigm has been successfully used in a wide range of applications including planning, diagnostics, graph problems, etc. The basic algorithm for computing stable models is implemented by several efficient systems. The most efficient implementation to date is called Smodels. Even though Smodels was demonstrated to be capable of solving several large industrial problems, there are some simple logic programs for which Smodels' performance is unexpectedly slow. This problem is not related to the implementation. Rather, it is the result of the one rule at a time inference used by the basic algorithm. The goal of this work is to improve the efficiency of the basic algorithm extending the set of inference rules with a new rule called the Extended Evaluation Rule (EER). EER efficiently retrieves information spread across several rules of a program. An algorithm, newsmodels, was developed incorporating the EER. A system Surya, based on the newsmodels algorithm was implemented. It was found that the EER considerably improves the efficiency of the system.},
	language = {eng},
	urldate = {2020-04-11},
	school = {Texas Tech University},
	author = {Mellarkod, Veena S.},
	month = may,
	year = {2002},
	keywords = {Status - Executive Summary, Smodels},
	file = {Full Text PDF:D\:\\Documents\\Zotero\\storage\\XFDSIXTR\\Mellarkod - 2002 - Optimizing the computation of stable models using .pdf:application/pdf;Snapshot:D\:\\Documents\\Zotero\\storage\\DYDEQAHG\\10219.html:text/html}
}

@inproceedings{blount_towards_2014,
	title = {Towards a {Theory} of {Intentional} {Agents}},
	copyright = {Authors who publish a paper in an  AAAI Technical Report  agree to the following terms:     Author(s) agree to grant to AAAI (1) the perpetual, nonexclusive world rights to use the submitted paper as part of an AAAI publication, in all languages and for all editions. (2) The right to use the paper, together with the author's name and pertinent biographical data, in advertising and promotion of it and the AAAI publication. (3) The right to publish or cause to be published the paper in connection with any republication of the AAAI publication in any medium including electronic. (4) The right to, and authorize others to, publish or cause to be published the paper in whole or in part, individually or in conjunction with other works, in any medium including electronic.   The author(s) warrants that they are the sole author and owner of the copyright in the above article/paper, except for those portions shown to be in quotations; that the article/paper is original throughout; and that the undersigned right to make the grants set forth above is complete and unencumbered.   The author(s) agree that if anyone brings any claim or action alleging facts that, if true, constitute a breach of any of the foregoing warranties, the author(s) will hold harmless and indemnify AAAI, their grantees, their licensees, and their distributors against any liability, whether under judgment, decree, or compromise, and any legal fees and expenses arising out of that claim or actions, and the undersigned will cooperate fully in any defense AAAI may make to such claim or action. Moreover, the undersigned agrees to cooperate in any claim or other action seeking to protect or enforce any right the undersigned has granted to AAAI in the article/paper. If any such claim or action fails because of facts that constitute a breach of any of the foregoing warranties, the undersigned agrees to reimburse whomever brings such claim or action for expenses and attorneys’ fees incurred therein.   Author(s) retain all proprietary rights (such as patent rights).   In the event the above article/paper is not accepted and published by AAAI, or is withdrawn by the author(s) before acceptance by AAAI, this agreement becomes null and void.},
	url = {https://www.aaai.org/ocs/index.php/SSS/SSS14/paper/view/7681},
	abstract = {This paper describes the AIA architecture for agents whose behavior is driven by their intentions and who reason about, and act in, changing environments. The description of the domain, written in action language AL, includes both a description of agent’s environment and the Theory of Intentions which describes properties of intentions. The architecture is designed to make agents capable of explaining unexpected observations (by means of diagnostic reasoning) and determining which of his actions are intended at the present moment. Reasoning tasks are reduced to computing answer sets of CR-Prolog programs constructed automatically from the agent’s knowledge.},
	language = {en},
	urldate = {2020-04-11},
	booktitle = {2014 {AAAI} {Spring} {Symposium} {Series}},
	author = {Blount, Justin Lane and Gelfond, Michael and Balduccini, Marcello},
	month = mar,
	year = {2014},
	keywords = {Status - Overview Contribution, Status - Executive Summary, AIA architecture, Important, Status - Referenced},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\9GC29XIK\\Blount et al. - 2014 - Towards a Theory of Intentional Agents.pdf:application/pdf;Snapshot:D\:\\Documents\\Zotero\\storage\\UL8WJXQ4\\7681.html:text/html}
}

@article{mccarthy_mathematical_1988,
	title = {Mathematical {Logic} in {Artificial} {Intelligence}},
	volume = {117},
	issn = {0011-5266},
	url = {https://www.jstor.org/stable/20025149},
	number = {1},
	urldate = {2020-04-11},
	journal = {Daedalus},
	author = {McCarthy, John},
	year = {1988},
	note = {Publisher: The MIT Press},
	keywords = {Status - Executive Summary, Elaboration tolerance, Status - Referenced},
	pages = {297--311},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\R89Z9WYW\\McCarthy - 1988 - Mathematical Logic in Artificial Intelligence.pdf:application/pdf}
}

@inproceedings{liao_extended_2006,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {An {Extended} {BDI} {Agent} with {Policies} and {Contracts}},
	isbn = {978-3-540-36860-1},
	doi = {10.1007/11802372_12},
	abstract = {In order to enable the intelligent agents to be aware of the dynamic business requirements and strategies, and cooperate with other agents in a stable and explicit way, a policy and contract extended BDI logic (called BGIPDC logic) has been proposed, by integrating contracts and policies into traditional BDI model. On the basis of BGIPDC logic, this paper proposes a model of agent architecture as a concrete realization of it, called PDC-agent. PDC-agent is an extension of traditional BDI agent, by adding a policy engine, a contract engine and a goal maintenance component into agent’s interpreter. Besides, PDC-agent has two characteristics. First, the operation of PDC-agent is based on an event-driven mechanism. Various events drive the components of the interpreter. Second, the representation of PDC-agent is on the basis of ontology.},
	language = {en},
	booktitle = {Agent {Computing} and {Multi}-{Agent} {Systems}},
	publisher = {Springer},
	author = {Liao, Bei-shui and Huang, Hua-xin and Gao, Ji},
	editor = {Shi, Zhong-Zhi and Sadananda, Ramakoti},
	year = {2006},
	keywords = {Status - Executive Summary, BDI architecture, Agent Architecture, Desire Event, Execution Engine, Execution Module, External Action, Important, PDC-agent architecture},
	pages = {94--104},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\L464CXNJ\\Liao et al. - 2006 - An Extended BDI Agent with Policies and Contracts.pdf:application/pdf}
}

@phdthesis{zhao_schema_2019,
	title = {{SCHEMA} {PROFILING} {FOR} {DOCUMENT} {DATABASES}: {SYSTEM} {DEVELOPMENT} {AND} {CASE} {STUDIES}},
	shorttitle = {{SCHEMA} {PROFILING} {FOR} {DOCUMENT} {DATABASES}},
	url = {https://etd.ohiolink.edu/pg_10?0::NO:10:P10_ACCESSION_NUM:miami156417281961505},
	language = {en},
	urldate = {2020-04-11},
	school = {Miami University},
	author = {Zhao, Zunchen},
	year = {2019},
	keywords = {Status - Executive Summary, Status - Going to ignore},
	file = {Full Text PDF:D\:\\Documents\\Zotero\\storage\\HS65EH38\\Zhao - 2019 - SCHEMA PROFILING FOR DOCUMENT DATABASES SYSTEM DE.pdf:application/pdf;Snapshot:D\:\\Documents\\Zotero\\storage\\RUXU7RL2\\pg_10.html:text/html}
}

@inproceedings{criado_normative_2010,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Normative {Deliberation} in {Graded} {BDI} {Agents}},
	isbn = {978-3-642-16178-0},
	doi = {10.1007/978-3-642-16178-0_7},
	abstract = {Norms have been employed as a coordination mechanism for Open MAS, but to become effective, they must be internalized by agents; i.e. these agents must be able to accept norms while maintaining their autonomy. Nevertheless, traditional BDI agent architectures only represent beliefs, intentions and desires. In this paper, the multi-context BDI agent architecture has been extended with a recognition context and a normative context in order to allow agents to acquire norms from their environment and consider norms in their decisions.},
	language = {en},
	booktitle = {Multiagent {System} {Technologies}},
	publisher = {Springer},
	author = {Criado, Natalia and Argente, Estefania and Botti, Vicent},
	editor = {Dix, Jürgen and Witteveen, Cees},
	year = {2010},
	keywords = {Status - Executive Summary, BDI architecture, Belief Context, Certainty Degree, Normative Context, Normative Reasoning, Recognition Context, Open MAS},
	pages = {52--63},
	file = {Slides:D\:\\Documents\\Zotero\\storage\\TU6KRTIC\\Criado et al. - 2010 - Normative Deliberation in Graded BDI Agents.pdf:application/pdf;Springer Full Text PDF:D\:\\Documents\\Zotero\\storage\\GIVEJRTG\\Criado et al. - 2010 - Normative Deliberation in Graded BDI Agents.pdf:application/pdf}
}

@inproceedings{balduccini_logic_2003,
	title = {Logic programs with consistency-restoring rules},
	volume = {102},
	author = {Balduccini, Marcello and Gelfond, Michael},
	year = {2003},
	keywords = {CR-Prolog, Status - Executive Summary, A-Prolog},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\GUWZ5RA9\\Balduccini and Gelfond - 2003 - Logic programs with consistency-restoring rules.pdf:application/pdf}
}

@article{gelfond_representing_1993,
	series = {Special {Issue}: {Non}-{Monotonic} {Reasoning} and {Logic} {Programming}},
	title = {Representing action and change by logic programs},
	volume = {17},
	issn = {0743-1066},
	url = {http://www.sciencedirect.com/science/article/pii/074310669390035F},
	doi = {10.1016/0743-1066(93)90035-F},
	abstract = {We represent properties of actions in a logic programming language that uses both classical negation and negation as failure. The method is applicable to temporal projection problems with incomplete information, as well as to reasoning about the past. It is proved to be sound relative to a semantics of action based on states and transition functions.},
	language = {en},
	number = {2},
	urldate = {2020-04-16},
	journal = {The Journal of Logic Programming},
	author = {Gelfond, Michael and Lifschitz, Vladimir},
	month = nov,
	year = {1993},
	keywords = {Status - Executive Summary},
	pages = {301--321},
	file = {ScienceDirect Snapshot:D\:\\Documents\\Zotero\\storage\\6VFNZMJW\\074310669390035F.html:text/html;ScienceDirect Full Text PDF:D\:\\Documents\\Zotero\\storage\\MPCA72Q2\\Gelfond and Lifschitz - 1993 - Representing action and change by logic programs.pdf:application/pdf}
}

@inproceedings{cossentino_notation_2012,
	title = {A {Notation} for {Modeling} {Jason}-{Like} {BDI} {Agents}},
	doi = {10.1109/CISIS.2012.203},
	abstract = {The design and development of a large Multi Agent System (MAS) is a complex and difficult activity where a proper modeling notation may offer a significant contribution to the formulation of the best solution. The support provided by a specific CASE tool can significantly contribute to make the chosen approach technically valid and it is also a fundamental element of a feasible development strategy. The present work reports a UML profile and the related graphical notation for describing a MAS based on the Jason meta model. Moreover a specific CASE tool has been developed for supporting MASs design and automatic code generation. The proposed notation is shown in details using a classical example from the Jason tutorial (domestic robot).},
	booktitle = {2012 {Sixth} {International} {Conference} on {Complex}, {Intelligent}, and {Software} {Intensive} {Systems}},
	author = {Cossentino, Massimo and Chella, Antonio and Lodato, Carmelo and Lopes, Salvatore and Ribino, Patrizia and Seidita, Valeria},
	month = jul,
	year = {2012},
	keywords = {multi-agent systems, BDI architecture, automatic code generation, CASE tool, computer aided software engineering, Computer aided software engineering, Context, domestic robot, Jason, Jason metamodel, Jason-like BDI agents, Multi-agent system, multiagent system, Multiagent systems, Object oriented modeling, Robots, Tutorials, UML profile, Unified modeling language, Unified Modeling Language},
	pages = {12--19},
	file = {IEEE Xplore Abstract Record:D\:\\Documents\\Zotero\\storage\\5VYTHDTE\\6245583.html:text/html;Submitted Version:D\:\\Documents\\Zotero\\storage\\RCD5GZS4\\Cossentino et al. - 2012 - A Notation for Modeling Jason-Like BDI Agents.pdf:application/pdf}
}

@inproceedings{bordini_bdi_2005,
	address = {London, UK},
	series = {{CLIMA}'05},
	title = {{BDI} agent programming in agentspeak using {Jason}},
	isbn = {978-3-540-33996-0},
	url = {https://doi.org/10.1007/11750734_9},
	doi = {10.1007/11750734_9},
	abstract = {This paper is based on the tutorial given as part of the tutorial programme of CLIMA-VI. The tutorial aimed at giving an overview of the various features available in Jason, a multi-agent systems development platform that is based on an interpreter for an extended version of AgentSpeak. The BDI architecture is the best known and most studied architecture for cognitive agents, and AgentSpeak is an elegant, logic-based programming language inspired by the BDI architecture.},
	urldate = {2020-04-16},
	booktitle = {Proceedings of the 6th international conference on {Computational} {Logic} in {Multi}-{Agent} {Systems}},
	publisher = {Springer-Verlag},
	author = {Bordini, Rafael H. and Hübner, Jomi F.},
	month = jun,
	year = {2005},
	keywords = {Status - Executive Summary, BDI architecture, Jason, AgentSpeak(L)},
	pages = {143--164},
	file = {Submitted Version:D\:\\Documents\\Zotero\\storage\\P9YNBT5G\\Bordini and Hübner - 2005 - BDI agent programming in agentspeak using Jason.pdf:application/pdf}
}

@book{uhrmacher_multi-agent_2018,
	title = {Multi-{Agent} {Systems}: {Simulation} and {Applications}},
	isbn = {978-1-351-83467-4},
	shorttitle = {Multi-{Agent} {Systems}},
	abstract = {Methodological Guidelines for Modeling and Developing MAS-Based Simulations  The intersection of agents, modeling, simulation, and application domains has been the subject of active research for over two decades. Although agents and simulation have been used effectively in a variety of application domains, much of the supporting research remains scattered in the literature, too often leaving scientists to develop multi-agent system (MAS) models and simulations from scratch.   Multi-Agent Systems: Simulation and Applications provides an overdue review of the wide ranging facets of MAS simulation, including methodological and application-oriented guidelines. This comprehensive resource reviews two decades of research in the intersection of MAS, simulation, and different application domains. It provides scientists and developers with disciplined engineering approaches to modeling and developing MAS-based simulations. After providing an overview of the field’s history and its basic principles, as well as cataloging the various simulation engines for MAS, the book devotes three sections to current and emerging approaches and applications.  Simulation for MAS — explains simulation support for agent decision making, the use of simulation for the design of self-organizing systems, the role of software architecture in simulating MAS, and the use of simulation for studying learning and stigmergic interaction.  MAS for Simulation — discusses an agent-based framework for symbiotic simulation, the use of country databases and expert systems for agent-based modeling of social systems, crowd-behavior modeling, agent-based modeling and simulation of adult stem cells, and agents for traffic simulation.   Tools — presents a number of representative platforms and tools for MAS and simulation, including Jason, James II, SeSAm, and RoboCup Rescue.  Complete with over 200 figures and formulas, this reference book provides the necessary overview of experiences with MAS simulation and the tools needed to exploit simulation in MAS for future research in a vast array of applications including home security, computational systems biology, and traffic management.},
	language = {en},
	publisher = {CRC Press},
	author = {Uhrmacher, Adelinde M. and Weyns, Danny},
	month = oct,
	year = {2018},
	note = {Google-Books-ID: tH1\_DwAAQBAJ},
	keywords = {Computers / General, Technology \& Engineering / Electronics / General}
}

@inproceedings{howden_jack_2001,
	title = {{JACK} intelligent agents-summary of an agent infrastructure},
	volume = {162},
	author = {Howden, Nick and Rönnquist, Ralph and Hodgson, Andrew and Lucas, Andrew},
	year = {2001},
	keywords = {Status - Executive Summary, BDI architecture, JACK Intelligent Agents™},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\Y4X5BZ4C\\Howden et al. - 2001 - JACK intelligent agents-summary of an agent infras.pdf:application/pdf}
}

@misc{jason_developers_jason_nodate,
	title = {Jason {\textbar} a {Java}-based interpreter for an extended version of {AgentSpeak}},
	url = {http://jason.sourceforge.net/wp/},
	abstract = {Jason is an interpreter for an extended version of AgentSpeak. It implements the operational semantics of that language, and provides a platform for the development of multi-agent systems, with many user-customisable features. Jason is available Open Source, and is distributed under GNU LGPL.},
	language = {en-US},
	urldate = {2020-04-16},
	author = {{Jason Developers}},
	note = {Library Catalog: jason.sourceforge.net},
	keywords = {Status - Executive Summary, Jason, AgentSpeak(L)},
	file = {Snapshot:D\:\\Documents\\Zotero\\storage\\ZU2ZBK4E\\wp.html:text/html}
}

@inproceedings{broersen_boid_2001,
	address = {Montreal, Quebec, Canada},
	series = {{AGENTS} '01},
	title = {The {BOID} architecture: conflicts between beliefs, obligations, intentions and desires},
	isbn = {978-1-58113-326-4},
	shorttitle = {The {BOID} architecture},
	url = {https://doi.org/10.1145/375735.375766},
	doi = {10.1145/375735.375766},
	abstract = {In this paper we introduce the so-called Beliefs-Obligations-Intentions-Desires or BOID architecture. It contains feedback loops to consider all effects of actions before committing to them, and mechanisms to resolve conflicts between the outputs of its four components. Agent types such as realistic or social agents correspond to specific types of conflict resolution embedded in the BOID archecture.},
	urldate = {2020-04-17},
	booktitle = {Proceedings of the fifth international conference on {Autonomous} agents},
	publisher = {Association for Computing Machinery},
	author = {Broersen, Jan and Dastani, Mehdi and Hulstijn, Joris and Huang, Zisheng and van der Torre, Leendert},
	month = may,
	year = {2001},
	keywords = {BOID architecture},
	pages = {9--16},
	file = {Full Text PDF:D\:\\Documents\\Zotero\\storage\\5U8WHSV7\\Broersen et al. - 2001 - The BOID architecture conflicts between beliefs, .pdf:application/pdf}
}

@inproceedings{wooldridge_agent_1995,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Agent theories, architectures, and languages: {A} survey},
	isbn = {978-3-540-49129-3},
	shorttitle = {Agent theories, architectures, and languages},
	doi = {10.1007/3-540-58855-8_1},
	abstract = {The concept of an agent has become important in both Artificial Intelligence (AI) and mainstream computer science. In this article, we present a survey of what we perceive to be the most important theoretical and practical issues associated with the design and construction of intelligent agents. The article also includes a short review of current and potential applications of agent technology, and closes with a glossary of key terms, an annotated list of systems, and a detailed bibliography. Pointers to further reading are provided throughout.},
	language = {en},
	booktitle = {Intelligent {Agents}},
	publisher = {Springer},
	author = {Wooldridge, Michael and Jennings, Nicholas R.},
	editor = {Wooldridge, Michael J. and Jennings, Nicholas R.},
	year = {1995},
	keywords = {Agent Architecture, Agent Theory, European Workshop, Modal Logic, Multiagent System},
	pages = {1--39},
	file = {Accepted Version:D\:\\Documents\\Zotero\\storage\\54P5ZHFB\\Wooldridge and Jennings - 1995 - Agent theories, architectures, and languages A su.pdf:application/pdf}
}

@book{bratman_intention_1987,
	title = {Intention, plans, and practical reason},
	volume = {10},
	publisher = {Harvard University Press Cambridge, MA},
	author = {Bratman, Michael},
	year = {1987}
}

@article{sureshkumar_ape_2007,
	title = {Ape: {An} ansprolog* environment},
	journal = {See De Vos and Schaub (2007)},
	author = {Sureshkumar, Adrian and De Vos, Marina and Brain, Martin and Fitch, John},
	year = {2007},
	pages = {101--115},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\UYSPTIRG\\Sureshkumar et al. - 2007 - Ape An ansprolog environment.pdf:application/pdf}
}

@inproceedings{lierler_cmodels-2_2004,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Cmodels-2: {SAT}-based {Answer} {Set} {Solver} {Enhanced} to {Non}-tight {Programs}},
	isbn = {978-3-540-24609-1},
	shorttitle = {Cmodels-2},
	doi = {10.1007/978-3-540-24609-1_32},
	abstract = {Answer set programming is a new programming paradigm proposed in [1] and [2], and based on the answer set semantics of Prolog [3]. It is well known that an answer set for a logic program is also a model of the program’s completion [4]. The converse is true when the logic program is “tight” [5,6]. Lin and Zhao [7] showed that for non-tight programs the models of completion which do not correspond to answer sets can be eliminated by adding to the completion what they called “loop formulas”. Nevertheless, their solver assat has some disadvantages: it can work only with basic rules, and it can compute only one answer set. Answer set solver cmodels-1 [12] is a system that computes answer sets for logic programs that are tight or can be transformed into tight programs, and does not suffer from these limitations.},
	language = {en},
	booktitle = {Logic {Programming} and {Nonmonotonic} {Reasoning}},
	publisher = {Springer},
	author = {Lierler, Yuliya and Maratea, Marco},
	editor = {Lifschitz, Vladimir and Niemelä, Ilkka},
	year = {2004},
	pages = {346--350},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\7NJZ4KBZ\\Lierler and Maratea - 2004 - Cmodels-2 SAT-based Answer Set Solver Enhanced to.pdf:application/pdf}
}

@inproceedings{gebser_clasp_2007,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {clasp: {A} {Conflict}-{Driven} {Answer} {Set} {Solver}},
	isbn = {978-3-540-72200-7},
	shorttitle = {clasp},
	doi = {10.1007/978-3-540-72200-7_23},
	abstract = {We describe the conflict-driven answer set solver clasp, which is based on concepts from constraint processing (CSP) and satisfiability checking (SAT). We detail its system architecture and major features, and provide a systematic empirical evaluation of its features.},
	language = {en},
	booktitle = {Logic {Programming} and {Nonmonotonic} {Reasoning}},
	publisher = {Springer},
	author = {Gebser, Martin and Kaufmann, Benjamin and Neumann, André and Schaub, Torsten},
	editor = {Baral, Chitta and Brewka, Gerhard and Schlipf, John},
	year = {2007},
	keywords = {Bound Model Check, Clause Learning, Command Line Option, Decision Heuristic, Stable Model Semantic},
	pages = {260--265},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\TUD6H3PM\\Gebser et al. - 2007 - clasp A Conflict-Driven Answer Set Solver.pdf:application/pdf}
}

@misc{baral_answer_2004,
	title = {Answer {Set} {Programming}: {Knowledge} {Representation}, {Reasoning}, and {Declarative} {Problem} {Solving} using {AnsProlog}*},
	url = {https://personal.utdallas.edu/~gupta/courses/acl/papers/asp-tutorial-baral.pdf},
	language = {en},
	author = {Baral, Chitta},
	month = jun,
	year = {2004},
	keywords = {Status - Executive Summary, Status - Referenced},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\PHS8EHV7\\Baral - ANSWER SET PROGRAMMING.pdf:application/pdf}
}

@inproceedings{jiang_ebdi_2007,
	address = {Honolulu, Hawaii},
	series = {{AAMAS} '07},
	title = {{EBDI}: an architecture for emotional agents},
	isbn = {978-81-904262-7-5},
	shorttitle = {{EBDI}},
	url = {https://doi.org/10.1145/1329125.1329139},
	doi = {10.1145/1329125.1329139},
	abstract = {Most of the research on multiagent systems has focused on the development of rational utility-maximizing agents. However, research shows that emotions have a strong effect on peoples' physical states, motivations, beliefs, and desires. By introducing primary and secondary emotion into BDI architecture, we present a generic architecture for an emotional agent, EBDI, which can merge various emotion theories with an agent's reasoning process. It implements practical reasoning techniques separately from the specific emotion mechanism. The separation allows us to plug in emotional models as needed or upgrade the agent's reasoning engine independently.},
	urldate = {2020-04-20},
	booktitle = {Proceedings of the 6th international joint conference on {Autonomous} agents and multiagent systems},
	publisher = {Association for Computing Machinery},
	author = {Jiang, Hong and Vidal, Jose M. and Huhns, Michael N.},
	month = may,
	year = {2007},
	keywords = {agent architecture, belief-desire-intention, emotional agent},
	pages = {1--3},
	file = {Full Text PDF:D\:\\Documents\\Zotero\\storage\\BY6U8JBR\\Jiang et al. - 2007 - EBDI an architecture for emotional agents.pdf:application/pdf}
}

@inproceedings{dignum_towards_2009,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Towards {Agents} for {Policy} {Making}},
	isbn = {978-3-642-01991-3},
	doi = {10.1007/978-3-642-01991-3_11},
	abstract = {The process of introducing new public policies is a complex one in the sense that the behavior of society at the macro-level depends directly on the individual behavior of the people in that society and ongoing dynamics of the environment. It is at the micro-level that change is initiated, that policies effectively change the behavior of individuals. Since macro-models do not suffice, science has turned to develop and study agent-based simulations, i.e., micro-level models. In correspondence with the good scientific practice of parsimony, current ABSS models are based on agents with simple cognitive capabilities. However, the societies being modeled in policy making relate to real people with real needs and personalities, often of a multi-cultural composition. Those circumstances require the agents to be diversified to accommodate these facts.In this positioning paper, we propose an incrementally complex model for agent reasoning that can describe the influence of policies or comparable external influences on the behavior of agents. Starting from the BDI model for agent reasoning, we discuss the effect when personality and Maslow’s hierarchy of needs are added to the model. Finally, we extend the model with a component that captures the cultural background and normative constitution of the agent.In the paper we show how these extensions affect the filtering of the desires and intentions of the agent and the willingness of the agent to modify its behavior in face of a new policy. This way, simulations can be made that support the differentiation of behaviors in multi-cultural societies, and thus can be made to support policy makers in their decisions.},
	language = {en},
	booktitle = {Multi-{Agent}-{Based} {Simulation} {IX}},
	publisher = {Springer},
	author = {Dignum, Frank and Dignum, Virginia and Jonker, Catholijn M.},
	editor = {David, Nuno and Sichman, Jaime Simão},
	year = {2009},
	keywords = {Status - Executive Summary, Agent Belief, Agent Reasoning, Meso Level, Social Simulation, Support Policy Maker},
	pages = {141--153},
	file = {Springer Full Text PDF:D\:\\Documents\\Zotero\\storage\\JKFDIQ9S\\Dignum et al. - 2009 - Towards Agents for Policy Making.pdf:application/pdf}
}

@inproceedings{urban_pecs_2000,
	address = {Heidelberg},
	title = {{PECS}: {A} {Reference} {Model} for the {Simulation} of {Multi}-{Agent} {Systems}},
	isbn = {978-3-642-51744-0},
	shorttitle = {{PECS}},
	doi = {10.1007/978-3-642-51744-0_6},
	abstract = {There is currently a multitude of design approaches all concerned with building simulation models for multi-agent systems. The majority of the designs, however, focus on the requirements of specific application domains. We suggest that it would be desirable to develop a modelling methodology which can act as a generic platform from which to construct simulation models for multi-agent systems. In order to promote standardisation of modelling methodology, this paper presents a first-cut reference model whose feasibility will subsequently be demonstrated by a number of applications.},
	language = {en},
	booktitle = {Tools and {Techniques} for {Social} {Science} {Simulation}},
	publisher = {Physica-Verlag HD},
	author = {Urban, Christoph},
	editor = {Suleiman, Ramzi and Troitzsch, Klaus G. and Gilbert, Nigel},
	year = {2000},
	keywords = {Status - Executive Summary, Agent Architecture, Multiagent System, Message Passing, Reference Model, Selfish Agent},
	pages = {83--114}
}

@incollection{pednault_formulating_1987,
	title = {Formulating multiagent, dynamic-world problems in the classical planning framework},
	booktitle = {Reasoning about actions \& plans},
	publisher = {Elsevier},
	author = {Pednault, Edwin PD},
	year = {1987},
	pages = {47--82}
}

@inproceedings{balduccini_learning_2007,
	title = {Learning {Action} {Descriptions} with {A}-{Prolog}: {Action} {Language} {C}.},
	author = {Balduccini, Marcello},
	year = {2007},
	pages = {13--18},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\LCHJH3ZW\\Balduccini - 2007 - Learning Action Descriptions with A-Prolog Action.pdf:application/pdf}
}

@inproceedings{ferraiolo_role-based_1995,
	title = {Role-based access control ({RBAC}): {Features} and motivations},
	author = {Ferraiolo, David and Cugini, Janet and Kuhn, D Richard},
	year = {1995},
	pages = {241--48},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\ERIRY8XE\\Ferraiolo et al. - 1995 - Role-based access control (RBAC) Features and mot.pdf:application/pdf}
}

@inproceedings{gelfond_authorization_2008,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Authorization and {Obligation} {Policies} in {Dynamic} {Systems}},
	isbn = {978-3-540-89982-2},
	doi = {10.1007/978-3-540-89982-2_7},
	abstract = {The paper defines a language for specifying authorization and obligation policies of an intelligent agent acting in a changing environment and presents several ASP based algorithms for checking compliance of an event with a policy specified in this language. The language allows representation of defeasible policies and is based on theory of action and change.},
	language = {en},
	booktitle = {Logic {Programming}},
	publisher = {Springer},
	author = {Gelfond, Michael and Lobo, Jorge},
	editor = {Garcia de la Banda, Maria and Pontelli, Enrico},
	year = {2008},
	keywords = {Status - Overview Contribution, Status - Executive Summary, Logic Program, Access Control Policy, Access Control System, Authorization Policy, Authorization Rule},
	pages = {22--36},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\Z2KEBXAN\\Gelfond and Lobo - 2008 - Authorization and Obligation Policies in Dynamic S.pdf:application/pdf}
}

@inproceedings{vladimir_lifschitz_what_2008,
	title = {What {Is} {Answer} {Set} {Programming}?},
	url = {https://www.aaai.org/Library/AAAI/2008/aaai08-270.php},
	abstract = {Answer set programming (ASP) is a form of declarative programming oriented towards difﬁcult search problems. As an outgrowth of research on the use of nonmonotonic reasoning in knowledge representation, it is particularly useful in knowledge-intensive applications. ASP programs consist of rules that look like Prolog rules, but the computational mechanisms used in ASP are different: they are based on the ideas that have led to the creation of fast satisﬁability solvers for propositional logic.},
	language = {en},
	author = {{Vladimir Lifschitz}},
	year = {2008},
	pages = {1594--1597},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\KYQKJ8VN\\Vladimir Lifschitz - 2008 - What Is Answer Set Programming.pdf:application/pdf}
}

@article{calimeri_asp-core-2_2020,
	title = {{ASP}-{Core}-2 {Input} {Language} {Format}},
	volume = {20},
	issn = {1471-0684, 1475-3081},
	url = {http://arxiv.org/abs/1911.04326},
	doi = {10.1017/S1471068419000450},
	abstract = {Standardization of solver input languages has been a main driver for the growth of several areas within knowledge representation and reasoning, fostering the exploitation in actual applications. In this document we present the ASPCore-2 standard input language for Answer Set Programming, which has been adopted in ASP Competition events since 2013.},
	language = {en},
	number = {2},
	urldate = {2020-06-29},
	journal = {Theory and Practice of Logic Programming},
	author = {Calimeri, Francesco and Faber, Wolfgang and Gebser, Martin and Ianni, Giovambattista and Kaminski, Roland and Krennwallner, Thomas and Leone, Nicola and Maratea, Marco and Ricca, Francesco and Schaub, Torsten},
	month = mar,
	year = {2020},
	note = {arXiv: 1911.04326},
	keywords = {Computer Science - Artificial Intelligence, Computer Science - Logic in Computer Science},
	pages = {294--309},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\555HVTNC\\Calimeri et al. - 2020 - ASP-Core-2 Input Language Format.pdf:application/pdf}
}

@inproceedings{yan-bin_peng_policy-driven_2005,
	title = {Policy-{Driven} {Agent} {Social}},
	volume = {1},
	doi = {10.1109/ICMLC.2005.1526970},
	abstract = {Policy-driven system is a new research point. The system can gain autonomous ability through policy. In this paper, we present a system of policy-driven agent social, called PDAS4, which emphases on impose the policy-driven mechanism into multi-agents system, provides a platform to autonomous control the whole process of agent social activities. The main point of this paper is to propose an approach of policy-driven mechanism to control the cooperation and service execution of agents. In addition, an implementation of this system was developed and a simulated test was conducted successfully.},
	booktitle = {2005 {International} {Conference} on {Machine} {Learning} and {Cybernetics}},
	author = {Yan-Bin Peng and Ji Gao and Jun Hu and Bei-Shui Liao},
	month = aug,
	year = {2005},
	note = {ISSN: 2160-1348},
	keywords = {Computer science, Humans, Control systems, Logic, Multiagent systems, agent social, federation, Intelligent agent, Monitoring, Multi-agents, PDAS4, policy-driven, Process control, Software agents, System testing},
	pages = {345--350},
	file = {IEEE Xplore Abstract Record:D\:\\Documents\\Zotero\\storage\\U74KXUDV\\1526970.html:text/html;IEEE Xplore PDF:D\:\\Documents\\Zotero\\storage\\DUTFBAR7\\Yan-Bin Peng et al. - 2005 - Policy-Driven Agent Social.pdf:application/pdf}
}

@article{gao_trusted_2009,
	title = {Trusted autonomic service cooperation model and application development framework},
	volume = {52},
	issn = {1862-2836},
	url = {https://doi.org/10.1007/s11432-009-0080-2},
	doi = {10.1007/s11432-009-0080-2},
	abstract = {To achieve the dynamical on-requirement self-organization and self-evolution of virtual organizations (VOs) by autonomic service cooperation is an excellent approach for developing assembled service-oriented application software systems in the Internet computing environment. However, this approach, due to the fact that the autonomic individual behaviors are difficult to be predicted and controlled, encounters the “trust” crisis of cooperation effect. In order to solve the above crisis, this paper proposes a model of Norm-Governed and Policy-Driven autonomic service cooperation (NGPD). The key idea of NGPD is to constrain and govern the cooperation behaviors and their evolutions of autonomic individuals by formulating systematic standards of social structures and the coupling norms of cooperation behaviors, and thereby the cooperation behaviors (i.e. behaviors for providing and requiring services) of autonomic individuals and the cooperation effect can be controlled, predicted, and then become trusted. Furthermore, NGPD provides the “macro-micro” link mode to support the operation-level implementation of macro-government and creates the policy-driven self-management mechanism for individual behaviors to achieve the mapping from the macro-government to the micro-behaviors. Thus, the effect of the macro-government can be exerted to autonomic individuals so that they can exhibit the intellect for conforming to service contracts and cooperation behavior norms, but still keep high autonomy again. Along with the settlement of this “trust” crisis, NGPD can overcome the limitation introduced by non-autonomic service cooperation, and thus make the autonomy and change-response ability of service cooperation exhibit the advantages of robustness and intelligence which cannot be reached by traditional service cooperation techniques. Furthermore, NGPD also establishes the solid foundation for developing the norm-driven and contract-ensured self-organization of hierarchical cooperation and the cooperation self-adaptation and self-evolution driven by contract-performing circumstance. All of these make the service cooperation-based VOs possess high performance of dynamical on-requirement self-organization and self-evolution.},
	language = {en},
	number = {9},
	urldate = {2020-07-02},
	journal = {Science in China Series F: Information Sciences},
	author = {Gao, Ji and Lü, HeXing and Guo, Hang and Zhang, Fan and Cheng, Yu and Fu, ChaoYang and Wang, CunHao},
	month = sep,
	year = {2009},
	pages = {1550--1577},
	file = {Springer Full Text PDF:D\:\\Documents\\Zotero\\storage\\3H9ZIICE\\Gao et al. - 2009 - Trusted autonomic service cooperation model and ap.pdf:application/pdf}
}

@inproceedings{liao_model_2005,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {A {Model} of {Multi}-agent {System} {Based} on {Policies} and {Contracts}},
	isbn = {978-3-540-31731-9},
	doi = {10.1007/11559221_7},
	abstract = {Due to the dynamic nature of virtual organizations (VOs), it is necessary that the multi-agent system for VO formation and cooperation should be aware of the mutable business requirements or user’s preferences within VO environments and integrate these dynamic business requirements into its decision making process. We present a model of multi-agent system based on policies and contracts, in which the requirements for both the system and the individual agents can be defined dynamically by means of policies. On the one hand, at the system level, the duties and rights of roles can be specified or modified in terms of policies presented by the VO administrators. And on the other hand, role enacting agents are guided by policies defined by their owners. The policy and contract extended agent model (BGIPDC) is the core of the system, which is formally specified in this paper.},
	language = {en},
	booktitle = {Multi-{Agent} {Systems} and {Applications} {IV}},
	publisher = {Springer},
	author = {Liao, Beishui and Gao, Ji},
	editor = {Pěchouček, Michael and Petta, Paolo and Varga, László Zsolt},
	year = {2005},
	keywords = {Multiagent System, Agent Model, Business Requirement, Guidance Policy, Virtual Organization},
	pages = {62--71},
	file = {Springer Full Text PDF:D\:\\Documents\\Zotero\\storage\\ADCDMK4I\\Liao and Gao - 2005 - A Model of Multi-agent System Based on Policies an.pdf:application/pdf}
}

@article{ji_dynamic_2006,
	title = {Dynamic {Self}-{Organizing} {System} {Supported} by {PDC}-{Agent} [{J}]},
	volume = {2},
	url = {https://en.cnki.com.cn/Article_en/CJFDTotal-JSJF200602008.htm},
	journal = {Journal of Computer-Aided Design \& Computer Graphics},
	author = {Ji, Liao Beishui Gao},
	year = {2006}
}

@inproceedings{liao_ontology-based_2004,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Ontology-{Based} {Conceptual} {Modeling} of {Policy}-{Driven} {Control} {Framework}: {Oriented} to {Multi}-agent {System} for {Web} {Services} {Management}},
	isbn = {978-3-540-30483-8},
	shorttitle = {Ontology-{Based} {Conceptual} {Modeling} of {Policy}-{Driven} {Control} {Framework}},
	doi = {10.1007/978-3-540-30483-8_42},
	abstract = {The integration of web services and intelligent agents is promising for automated service discovery, negotiation, and cooperation. But due to the dynamic and heterogeneous nature of web services and agents, it is challenging to guide the behaviors of underlying agents to meet the high-level business (changeful) requirements. Traditional Policy-driven methods (Ponder, Rei, KAoS, etc) are not adaptable to direct the discovery, negotiation and cooperation of dynamic agents who may join in or leave out of a specific community or organization (virtual organization) at run time. The purpose of this paper is to model an ontology-based, policy-driven control framework that is suitable to supervise the dynamic agents according to high-level policies. On the basis of federated multi-agents infrastructure and ontologies of policies, domain concepts, and agent federations, a model of role-based policy specification framework is presented in this paper.},
	language = {en},
	booktitle = {Content {Computing}},
	publisher = {Springer},
	author = {Liao, Beishui and Gao, Ji and Hu, Jun and Chen, Jiujun},
	editor = {Chi, Chi-Hung and Lam, Kwok-Yan},
	year = {2004},
	keywords = {Virtual Organization, Agent Federation, Domain Concept, Domain Ontology, Dynamic Agent},
	pages = {346--356},
	file = {Springer Full Text PDF:D\:\\Documents\\Zotero\\storage\\6BZILGYP\\Liao et al. - 2004 - Ontology-Based Conceptual Modeling of Policy-Drive.pdf:application/pdf}
}

@inproceedings{liao_automatic_2005,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {An {Automatic} {Policy} {Refinement} {Mechanism} for {Policy}-{Driven} {Grid} {Service} {Systems}},
	isbn = {978-3-540-32277-1},
	doi = {10.1007/11590354_23},
	abstract = {Currently, the management of grid services is becoming increasingly complex. To resolve this complexity problem, autonomic computing and policy-based multi-agent technology have been proposed as promising methods. However, there are many challenges to be resolved. Among them, policy refinement is a great problem that hampers the development of policy-based system. To cope with this issue, this paper presents a policy refinement mechanism based on recipes. Recipes define possible refinement alternatives for each abstract policy. And the policy refinement engine automatically refines the policies by choosing the refinement branch in terms of the conditions of each branch.},
	language = {en},
	booktitle = {Grid and {Cooperative} {Computing} - {GCC} 2005},
	publisher = {Springer},
	author = {Liao, Bei-shui and Gao, Ji},
	editor = {Zhuge, Hai and Fox, Geoffrey C.},
	year = {2005},
	keywords = {Business Requirement, Virtual Organization, Autonomic Computing, Enforceable Policy, Plan Step},
	pages = {166--171},
	file = {Springer Full Text PDF:D\:\\Documents\\Zotero\\storage\\JU7XTZYK\\Liao and Gao - 2005 - An Automatic Policy Refinement Mechanism for Polic.pdf:application/pdf}
}

@inproceedings{georgeff_reactive_1987,
	title = {Reactive reasoning and planning.},
	volume = {87},
	url = {https://www.aaai.org/Papers/AAAI/1987/AAAI87-121.pdf},
	abstract = {In this paper, the reasoning and planning capabilities of an autonomous mobile robot are described; The reasoning system that controls the robot is designed to exhibit the kind of behavior expected of a rational agent, and is endowed with the psychological attitudes of belief, desire, and intention. Because these attitudes are explicitly represented, they can be manipulated and reasoned about, resulting in complex goal-directed and reflective behaviors. Unlike most planning systems, the plans or intentions formed by the robot need only be partly elaborated before it decides to act. This allows the robot to avoid overly strong expectations about the environment, overly constrained plans of action, and other forms of overcommitment common to previous planners. In addition, the robot is continuously reactive and has the ability to change its goals and intentions as situations warrant. The system has been tested with SRI’s autonomous robot (Flakey) in a space station scenario involving navigation and the performance of emergency tasks.},
	author = {Georgeff, Michael P and Lansky, Amy L},
	year = {1987},
	pages = {677--682},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\95XMI3NH\\Georgeff and Lansky - 1987 - Reactive reasoning and planning..pdf:application/pdf}
}

@inproceedings{balduccini_usa-smart_2004,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {{USA}-{Smart}: {Improving} the {Quality} of {Plans} in {Answer} {Set} {Planning}},
	isbn = {978-3-540-24836-1},
	shorttitle = {{USA}-{Smart}},
	doi = {10.1007/978-3-540-24836-1_10},
	abstract = {In this paper we show how CR-Prolog, a recent extension of A-Prolog, was used in the successor of USA-Advisor (USA-Smart) in order to improve the quality of the plans returned. The general problem that we address is that of improving the quality of plans by taking in consideration statements that describe “most desirable” plans. We believe that USA-Smart proves that CR-Prolog provides a simple, elegant, and flexible solution to this problem, and can be easily applied to any planning domain. We also discuss how alternative extensions of A-Prolog can be used to obtain similar results.},
	language = {en},
	booktitle = {Practical {Aspects} of {Declarative} {Languages}},
	publisher = {Springer},
	author = {Balduccini, Marcello},
	editor = {Jayaraman, Bharat},
	year = {2004},
	keywords = {answer set programming, Planning, preferences},
	pages = {135--147},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\H9ZUU7VW\\Balduccini - 2004 - USA-Smart Improving the Quality of Plans in Answe.pdf:application/pdf}
}

@incollection{balduccini_asp_2011,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {{ASP} as a {Cognitive} {Modeling} {Tool}: {Short}-{Term} {Memory} and {Long}-{Term} {Memory}},
	isbn = {978-3-642-20832-4},
	shorttitle = {{ASP} as a {Cognitive} {Modeling} {Tool}},
	url = {https://doi.org/10.1007/978-3-642-20832-4_24},
	abstract = {In this paper we continue our investigation on the viability of Answer Set Programming (ASP) as a tool for formalizing, and reasoning about, psychological models. In the field of psychology, a considerable amount of knowledge is still expressed using only natural language. This lack of a formalization complicates accurate studies, comparisons, and verification of theories. We believe that ASP, a knowledge representation formalism allowing for concise and simple representation of defaults, uncertainty, and evolving domains, can be used successfully for the formalization of psychological knowledge. In previous papers we have shown how ASP can be used to formalize a rather well-established model of Short-Term Memory, and how the resulting encoding can be applied to practical tasks, such as those from the area of human-computer interaction. In this paper we extend the model of Short-Term Memory and introduce the model of a substantial portion of Long-Term Memory, whose formalization is made particularly challenging by the ability to learn proper of this part of the brain. Furthermore, we compare our approach with various established techniques from the area of cognitive modeling.},
	language = {en},
	urldate = {2020-07-03},
	booktitle = {Logic {Programming}, {Knowledge} {Representation}, and {Nonmonotonic} {Reasoning}: {Essays} {Dedicated} to {Michael} {Gelfond} on the {Occasion} of {His} 65th {Birthday}},
	publisher = {Springer},
	author = {Balduccini, Marcello and Girotto, Sara},
	editor = {Balduccini, Marcello and Son, Tran Cao},
	year = {2011},
	doi = {10.1007/978-3-642-20832-4_24},
	keywords = {Logic Program, Auxiliary Relation, Memory Decay, Psychological Knowledge, Transition Diagram},
	pages = {377--397},
	file = {Full text PDF:D\:\\Documents\\Zotero\\storage\\3C4KGWZW\\Balduccini and Girotto - 2011 - ASP as a Cognitive Modeling Tool Short-Term Memor.pdf:application/pdf}
}

@phdthesis{chintabathina_modeling_2004,
	type = {Thesis},
	title = {Modeling hybrid domains using process description language},
	copyright = {Unrestricted.},
	url = {https://ttu-ir.tdl.org/handle/2346/9128},
	abstract = {Researchers in the field of knowledge representation and logic programming are constantly trying to come up with better ways to represent knowledge. One of the recent attempts is to model dynamic domains. A dynamic domain consists of actions that are capable of changing the properties of objects in the domain, for example the blocks world domain. Such domains can be modeled by action theories - collection of statements in so called action languages specifically designed for this purpose. In this thesis we extend this work to allow for continuous processes properties of objects that change continuously with time. For example the height of a freely falling object. In order to do this we adopt an action language/logic programming approach.

A new action language called process description language is introduced that will be useful to model systems that exhibit both continuous and discrete behavior (also called hybrid systems). An example of a hybrid domain is the domain consisting of a freely falling object. A freely falling object is in the state of falling, which is a discrete property that can be changed only by actions (also called fluent) while its height is a continuous process.

The syntax, semantics, and translation of the statements of the language into rules of a logic program will be discussed. Examples of domains that can represented in this language will be given. In addition, some planning and diagnostic problems will be discussed. Finally, the language will be compared with other languages used for similar purposes.},
	language = {eng},
	urldate = {2020-07-03},
	school = {Texas Tech University},
	author = {Chintabathina, Sandeep},
	month = dec,
	year = {2004},
	file = {Full Text PDF:D\:\\Documents\\Zotero\\storage\\LHDK6E3T\\Chintabathina - 2004 - Modeling hybrid domains using process description .pdf:application/pdf;Snapshot:D\:\\Documents\\Zotero\\storage\\9Q5E2TMS\\9128.html:text/html}
}

@article{niemela_smodels_2000,
	title = {Smodels: {A} {System} for {Answer} {Set} {Programming}},
	shorttitle = {Smodels},
	url = {http://arxiv.org/abs/cs/0003033},
	abstract = {The Smodels system implements the stable model semantics for normal logic programs. It handles a subclass of programs which contain no function symbols and are domain-restricted but supports extensions including built-in functions as well as cardinality and weight constraints. On top of this core engine more involved systems can be built. As an example, we have implemented total and partial stable model computation for disjunctive logic programs. An interesting application method is based on answer set programming, i.e., encoding an application problem as a set of rules so that its solutions are captured by the stable models of the rules. Smodels has been applied to a number of areas including planning, model checking, reachability analysis, product configuration, dynamic constraint satisfaction, and feature interaction.},
	urldate = {2020-07-05},
	journal = {arXiv:cs/0003033},
	author = {Niemela, Ilkka and Simons, Patrik and Syrjanen, Tommi},
	month = mar,
	year = {2000},
	note = {arXiv: cs/0003033},
	keywords = {Computer Science - Artificial Intelligence, I.2.3, I.2.4},
	file = {arXiv Fulltext PDF:D\:\\Documents\\Zotero\\storage\\JEG4HD9H\\Niemela et al. - 2000 - Smodels A System for Answer Set Programming.pdf:application/pdf;arXiv.org Snapshot:D\:\\Documents\\Zotero\\storage\\CYX2NENB\\0003033.html:text/html}
}

@article{tichy_experimental_1995,
	title = {Experimental evaluation in computer science: {A} quantitative study},
	volume = {28},
	issn = {0164-1212},
	shorttitle = {Experimental evaluation in computer science},
	url = {http://www.sciencedirect.com/science/article/pii/016412129400111Y},
	doi = {10.1016/0164-1212(94)00111-Y},
	abstract = {A survey of 400 recent research articles suggests that computer scientists publish relatively few papers with experimentally validated results. The survey includes complete volumes of several refereed computer science journals, a conference, and 50 titles drawn at random from all articles published by ACM in 1993. The journals of Optical Engineering (OE) and Neural Computation (NC) were used for comparison. Of the papers in the random sample that would require experimental validation, 40\% have none at all. In journals related to software engineering, this fraction is 50\%. In comparison, the fraction of papers lacking quantitative evaluation in OE and NC is only 15\% and 12\%, respectively. Conversely, the fraction of papers that devote one fifth or more of their space to experimental validation is almost 70\% for OE and NC, while it is a mere 30\% for the computer science (CS) random sample and 20\% for software engineering. The low ratio of validated results appears to be a serious weakness in computer science research. This weakness should be rectified for the long-term health of the field. The fundamental principle of science, the definition almost, is this: the sole test of the validity of any idea is experiment. —Richard P. Feynman. Beware of bugs in the above code; I have only proved it correct, not tried it. —Donald E. Knuth},
	language = {en},
	number = {1},
	urldate = {2020-07-06},
	journal = {Journal of Systems and Software},
	author = {Tichy, Walter F. and Lukowicz, Paul and Prechelt, Lutz and Heinz, Ernst A.},
	month = jan,
	year = {1995},
	pages = {9--18},
	file = {ScienceDirect Snapshot:D\:\\Documents\\Zotero\\storage\\EPMQMR7G\\016412129400111Y.html:text/html;ScienceDirect Full Text PDF:D\:\\Documents\\Zotero\\storage\\BM74D7LU\\Tichy et al. - 1995 - Experimental evaluation in computer science A qua.pdf:application/pdf}
}

@misc{university_of_potsdam_potassco_nodate,
	title = {Potassco},
	url = {https://potassco.org/},
	abstract = {Answer Set Programming (ASP) offers a simple and powerful modeling language to solve combinatorial problems. With our tools you can concentrate on an actual problem, rather than a smart way of implementing it.},
	urldate = {2020-07-07},
	journal = {Potassco, the Potsdam Answer Set Solving Collection},
	author = {{University of Potsdam}},
	file = {Potassco:D\:\\Documents\\Zotero\\storage\\QXFAYLRU\\potassco.org.html:text/html}
}

@article{gebser_potassco_2011,
	title = {Potassco: {The} {Potsdam} answer set solving collection},
	volume = {24},
	issn = {0921-7126},
	url = {https://proxy.lib.miamioh.edu/login?url=https://search.ebscohost.com/login.aspx?direct=true&AuthType=cookie,ip&db=buh&AN=59986018&site=eds-live&scope=site},
	number = {2},
	journal = {Ai Communications},
	author = {Gebser, Martin and Kaufmann, Benjamin and Kaminski, Roland and Ostrowski, Max and Schaub, Torsten and Schneider, Marius},
	year = {2011},
	note = {Publisher: Citeseer},
	keywords = {Status - Executive Summary},
	pages = {107--124},
	file = {EBSCO Full Text PDF:D\:\\Documents\\Zotero\\storage\\SAE44VYY\\Gebser et al. - 2011 - Potassco The Potsdam answer set solving collectio.pdf:application/pdf}
}

@article{gebser_abstract_2015,
	title = {Abstract {Gringo}},
	volume = {15},
	issn = {1471-0684, 1475-3081},
	url = {http://arxiv.org/abs/1507.06576},
	doi = {10.1017/S1471068415000150},
	abstract = {This paper defines the syntax and semantics of the input language of the ASP grounder GRINGO. The definition covers several constructs that were not discussed in earlier work on the semantics of that language, including intervals, pools, division of integers, aggregates with non-numeric values, and lparse-style aggregate expressions. The definition is abstract in the sense that it disregards some details related to representing programs by strings of ASCII characters. It serves as a specification for GRINGO from Version 4.5 on.},
	number = {4-5},
	urldate = {2020-07-14},
	journal = {Theory and Practice of Logic Programming},
	author = {Gebser, Martin and Harrison, Amelia and Kaminski, Roland and Lifschitz, Vladimir and Schaub, Torsten},
	month = jul,
	year = {2015},
	note = {arXiv: 1507.06576},
	keywords = {Computer Science - Programming Languages},
	pages = {449--463},
	file = {arXiv Fulltext PDF:D\:\\Documents\\Zotero\\storage\\UBGHNJAK\\Gebser et al. - 2015 - Abstract Gringo.pdf:application/pdf;arXiv.org Snapshot:D\:\\Documents\\Zotero\\storage\\8LCT8PZF\\1507.html:text/html}
}
